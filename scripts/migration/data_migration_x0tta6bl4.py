#!/usr/bin/env python3
"""
üìä Data Migration Script for x0tta6bl4
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ x0tta6bl4 –≤ x0tta6bl4-unified
"""

import os
import sys
import json
import shutil
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Set
import sqlite3
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class X0tta6bl4DataMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4"""

    def __init__(self, source_path: Path, target_path: Path, dry_run: bool = False):
        self.source_path = source_path
        self.target_path = target_path
        self.dry_run = dry_run

        self.migration_stats = {
            "files_copied": 0,
            "files_skipped": 0,
            "databases_migrated": 0,
            "configs_migrated": 0,
            "errors": []
        }

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        self.migration_targets = {
            "quantum_components": [
                "final_launch_system_fixed.py",
                "hawking_entropy_engine.py",
                "quantum_bypass_solver.py",
                "direct_cultural_quantum_test.py",
                "enhanced_quantum_system.py",
                "quantum_api_server.py",
                "quantum_chemistry_applications.py",
                "quantum_neural_network.py",
                "quantum_tetrahedron_cocreation.py"
            ],
            "ai_components": [
                "advanced_ai_ml_system.py",
                "edge/atom_ai.py",
                "edge/micromind_prepare.py",
                "working_ai_agents.py",
                "ai_ml_enhancement_system.py",
                "ai_models_improvement.py"
            ],
            "enterprise_components": [
                "commercialization_preparation_system.py",
                "enterprise_dashboard_architecture.md",
                "launch_commercial_services.py",
                "saas_platform.py"
            ],
            "api_components": [
                "api_implementation.py",
                "api_local.py",
                "start_api.py",
                "start_main_api.sh"
            ],
            "monitoring_components": [
                "system_monitor.py",
                "phi_metrics_monitor.py",
                "logging_enhancer.py"
            ],
            "config_files": [
                "*.yaml",
                "*.yml",
                "*.json",
                "*.conf",
                "*.cfg"
            ],
            "database_files": [
                "*.db",
                "*.sqlite",
                "*.sqlite3"
            ]
        }

    def migrate(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4")

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            self._create_target_structure()

            # –ú–∏–≥—Ä–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self._migrate_quantum_components():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self._migrate_ai_components():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è enterprise –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self._migrate_enterprise_components():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self._migrate_api_components():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if not self._migrate_monitoring_components():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if not self._migrate_config_files():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            if not self._migrate_databases():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            if not self._migrate_documentation():
                return False

            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.migration_stats}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            self.migration_stats["errors"].append(str(e))
            return False

    def _create_target_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ"""
        logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")

        directories = [
            "production/quantum",
            "production/ai",
            "production/enterprise",
            "production/api",
            "production/monitoring",
            "config",
            "data",
            "docs",
            "scripts/migration/backups"
        ]

        for dir_path in directories:
            full_path = self.target_path / dir_path
            if self.dry_run:
                logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {full_path}")
            else:
                full_path.mkdir(parents=True, exist_ok=True)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {full_path}")

    def _migrate_quantum_components(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("‚öõÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        target_dir = self.target_path / "production" / "quantum"
        source_files = self.migration_targets["quantum_components"]

        return self._copy_files_by_list(source_files, target_dir, "quantum")

    def _migrate_ai_components(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("ü§ñ –ú–∏–≥—Ä–∞—Ü–∏—è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        target_dir = self.target_path / "production" / "ai"
        source_files = self.migration_targets["ai_components"]

        return self._copy_files_by_list(source_files, target_dir, "ai")

    def _migrate_enterprise_components(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è enterprise –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üè¢ –ú–∏–≥—Ä–∞—Ü–∏—è enterprise –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        target_dir = self.target_path / "production" / "enterprise"
        source_files = self.migration_targets["enterprise_components"]

        return self._copy_files_by_list(source_files, target_dir, "enterprise")

    def _migrate_api_components(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üîå –ú–∏–≥—Ä–∞—Ü–∏—è API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        target_dir = self.target_path / "production" / "api"
        source_files = self.migration_targets["api_components"]

        return self._copy_files_by_list(source_files, target_dir, "api")

    def _migrate_monitoring_components(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üìä –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

        target_dir = self.target_path / "production" / "monitoring"
        source_files = self.migration_targets["monitoring_components"]

        return self._copy_files_by_list(source_files, target_dir, "monitoring")

    def _migrate_config_files(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        logger.info("‚öôÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")

        try:
            target_dir = self.target_path / "config" / "legacy_x0tta6bl4"
            target_dir.mkdir(parents=True, exist_ok=True)

            config_patterns = self.migration_targets["config_files"]

            for pattern in config_patterns:
                for file_path in self.source_path.rglob(pattern):
                    if file_path.is_file():
                        relative_path = file_path.relative_to(self.source_path)
                        target_file = target_dir / relative_path

                        if self.dry_run:
                            logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ñ–∏–≥: {file_path} -> {target_file}")
                        else:
                            target_file.parent.mkdir(parents=True, exist_ok=True)
                            shutil.copy2(file_path, target_file)
                            self.migration_stats["configs_migrated"] += 1
                            logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ñ–∏–≥: {relative_path}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {e}")
            self.migration_stats["errors"].append(f"config_migration: {str(e)}")
            return False

    def _migrate_databases(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üóÑÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")

        try:
            target_dir = self.target_path / "data" / "legacy_databases"
            target_dir.mkdir(parents=True, exist_ok=True)

            db_patterns = self.migration_targets["database_files"]

            for pattern in db_patterns:
                for file_path in self.source_path.rglob(pattern):
                    if file_path.is_file():
                        relative_path = file_path.relative_to(self.source_path)
                        target_file = target_dir / relative_path

                        if self.dry_run:
                            logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ë–î: {file_path} -> {target_file}")
                        else:
                            target_file.parent.mkdir(parents=True, exist_ok=True)
                            shutil.copy2(file_path, target_file)
                            self.migration_stats["databases_migrated"] += 1
                            logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ë–î: {relative_path}")

                            # –ü–æ–ø—ã—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –ë–î
                            self._migrate_database_schema(file_path, target_file)

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: {e}")
            self.migration_stats["errors"].append(f"database_migration: {str(e)}")
            return False

    def _migrate_database_schema(self, source_db: Path, target_db: Path):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite –ë–î
            if source_db.suffix in ['.db', '.sqlite', '.sqlite3']:
                conn = sqlite3.connect(str(target_db))
                cursor = conn.cursor()

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = cursor.fetchall()

                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î {source_db.name}: {len(tables)}")

                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—Ö–µ–º—ã
                # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å unified —Å–∏—Å—Ç–µ–º–æ–π

                conn.close()

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –ë–î {source_db}: {e}")

    def _migrate_documentation(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        logger.info("üìö –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")

        try:
            target_dir = self.target_path / "docs" / "legacy_x0tta6bl4"
            target_dir.mkdir(parents=True, exist_ok=True)

            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Ñ–∞–π–ª–æ–≤
            for md_file in self.source_path.rglob("*.md"):
                if md_file.is_file():
                    relative_path = md_file.relative_to(self.source_path)
                    target_file = target_dir / relative_path

                    if self.dry_run:
                        logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {md_file} -> {target_file}")
                    else:
                        target_file.parent.mkdir(parents=True, exist_ok=True)
                        shutil.copy2(md_file, target_file)
                        logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {relative_path}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            self.migration_stats["errors"].append(f"documentation_migration: {str(e)}")
            return False

    def _copy_files_by_list(self, file_list: List[str], target_dir: Path, component_type: str) -> bool:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É"""
        try:
            for file_name in file_list:
                source_file = self.source_path / file_name

                if source_file.exists():
                    if self.dry_run:
                        logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {component_type} —Ñ–∞–π–ª: {file_name}")
                    else:
                        target_file = target_dir / file_name
                        target_file.parent.mkdir(parents=True, exist_ok=True)
                        shutil.copy2(source_file, target_file)
                        self.migration_stats["files_copied"] += 1
                        logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {component_type} —Ñ–∞–π–ª: {file_name}")
                else:
                    self.migration_stats["files_skipped"] += 1
                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {component_type} —Ñ–∞–π–ª–æ–≤: {e}")
            self.migration_stats["errors"].append(f"{component_type}_copy: {str(e)}")
            return False

    def get_migration_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        return {
            "source_project": "x0tta6bl4",
            "target_project": "x0tta6bl4-unified",
            "timestamp": datetime.now().isoformat(),
            "stats": self.migration_stats,
            "dry_run": self.dry_run
        }