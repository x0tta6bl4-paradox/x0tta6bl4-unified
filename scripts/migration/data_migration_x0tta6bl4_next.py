#!/usr/bin/env python3
"""
üìä Data Migration Script for x0tta6bl4-next
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ x0tta6bl4-next –≤ x0tta6bl4-unified
"""

import os
import sys
import json
import shutil
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Set
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class X0tta6bl4NextDataMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4-next"""

    def __init__(self, source_path: Path, target_path: Path, dry_run: bool = False):
        self.source_path = source_path
        self.target_path = target_path
        self.dry_run = dry_run

        self.migration_stats = {
            "services_migrated": 0,
            "configs_migrated": 0,
            "k8s_manifests_migrated": 0,
            "tests_migrated": 0,
            "docs_migrated": 0,
            "errors": []
        }

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        self.migration_targets = {
            "services": {
                "quantum_performance_predictor": "services/quantum_performance_predictor/",
                "quantum_auto_scaler": "services/quantum_auto_scaler/",
                "phi_harmonic_load_balancer": "services/phi_harmonic_load_balancer/",
                "api_gateway": "services/api_gateway/",
                "mesh_api": "services/mesh_api/",
                "task_controller": "services/task_controller/",
                "analytics": "services/analytics/",
                "billing": "services/billing/"
            },
            "config_files": [
                "config/x0tta6bl4_config.yaml",
                "pyproject.toml",
                "requirements.txt",
                "requirements-dev.txt"
            ],
            "k8s_manifests": [
                "k8s/keda/",
                "k8s/deployments/",
                "k8s/services/"
            ],
            "source_code": [
                "src/x0tta6bl4_settings.py",
                "src/"
            ],
            "tests": [
                "tests/"
            ]
        }

    def migrate(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4-next")

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            self._create_target_structure()

            # –ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            if not self._migrate_services():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if not self._migrate_config_files():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
            if not self._migrate_k8s_manifests():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
            if not self._migrate_source_code():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
            if not self._migrate_tests():
                return False

            # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            if not self._migrate_documentation():
                return False

            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4-next –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.migration_stats}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            self.migration_stats["errors"].append(str(e))
            return False

    def _create_target_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ"""
        logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è x0tta6bl4-next...")

        directories = [
            "production/services",
            "config/x0tta6bl4_next",
            "k8s",
            "src",
            "tests",
            "docs/x0tta6bl4_next"
        ]

        for dir_path in directories:
            full_path = self.target_path / dir_path
            if self.dry_run:
                logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {full_path}")
            else:
                full_path.mkdir(parents=True, exist_ok=True)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {full_path}")

    def _migrate_services(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîß –ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

        try:
            target_services_dir = self.target_path / "production" / "services"

            for service_name, service_path in self.migration_targets["services"].items():
                source_service_dir = self.source_path / service_path

                if source_service_dir.exists():
                    target_service_dir = target_services_dir / service_name

                    if self.dry_run:
                        logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å: {service_name}")
                    else:
                        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                        if target_service_dir.exists():
                            shutil.rmtree(target_service_dir)
                        shutil.copytree(source_service_dir, target_service_dir)

                        # –°–æ–∑–¥–∞–Ω–∏–µ __init__.py –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        init_file = target_service_dir / "__init__.py"
                        if not init_file.exists():
                            init_file.write_text(f'"""Service: {service_name}"""\n')

                        self.migration_stats["services_migrated"] += 1
                        logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å: {service_name}")

                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                        self._process_service_specifics(service_name, target_service_dir)
                else:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {service_path}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            self.migration_stats["errors"].append(f"services_migration: {str(e)}")
            return False

    def _process_service_specifics(self, service_name: str, service_dir: Path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            if service_name == "quantum_performance_predictor":
                self._adapt_quantum_performance_service(service_dir)
            elif service_name == "quantum_auto_scaler":
                self._adapt_quantum_auto_scaler_service(service_dir)
            elif service_name == "phi_harmonic_load_balancer":
                self._adapt_phi_harmonic_service(service_dir)
            elif service_name == "api_gateway":
                self._adapt_api_gateway_service(service_dir)
            elif service_name == "mesh_api":
                self._adapt_mesh_api_service(service_dir)

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")

    def _adapt_quantum_performance_service(self, service_dir: Path):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ quantum_performance_predictor"""
        app_file = service_dir / "app.py"
        if app_file.exists():
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å unified —Å–∏—Å—Ç–µ–º–æ–π
            with open(app_file, 'a') as f:
                f.write('\n\n# Integration with x0tta6bl4-unified\n')
                f.write('from production.monitoring.unified_monitoring import UnifiedMonitoring\n')
                f.write('monitoring = UnifiedMonitoring()\n')

    def _adapt_quantum_auto_scaler_service(self, service_dir: Path):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ quantum_auto_scaler"""
        app_file = service_dir / "app.py"
        if app_file.exists():
            with open(app_file, 'a') as f:
                f.write('\n\n# Auto-scaling integration\n')
                f.write('from production.scaling.unified_scaler import UnifiedScaler\n')
                f.write('scaler = UnifiedScaler()\n')

    def _adapt_phi_harmonic_service(self, service_dir: Path):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ phi_harmonic_load_balancer"""
        app_file = service_dir / "app.py"
        if app_file.exists():
            with open(app_file, 'a') as f:
                f.write('\n\n# Phi harmonic integration\n')
                f.write('PHI_CONSTANT = 1.618033988749895\n')
                f.write('SACRED_FREQUENCY = 108\n')

    def _adapt_api_gateway_service(self, service_dir: Path):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è API Gateway"""
        app_file = service_dir / "app.py"
        if app_file.exists():
            with open(app_file, 'a') as f:
                f.write('\n\n# Unified API Gateway integration\n')
                f.write('from production.api.main import app as unified_app\n')

    def _adapt_mesh_api_service(self, service_dir: Path):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è Mesh API"""
        app_file = service_dir / "app.py"
        if app_file.exists():
            with open(app_file, 'a') as f:
                f.write('\n\n# Mesh networking integration\n')
                f.write('from production.networking.mesh_network import MeshNetwork\n')
                f.write('mesh = MeshNetwork()\n')

    def _migrate_config_files(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        logger.info("‚öôÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")

        try:
            target_config_dir = self.target_path / "config" / "x0tta6bl4_next"

            for config_file in self.migration_targets["config_files"]:
                source_file = self.source_path / config_file

                if source_file.exists():
                    if self.dry_run:
                        logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ñ–∏–≥: {config_file}")
                    else:
                        target_file = target_config_dir / source_file.name
                        shutil.copy2(source_file, target_file)

                        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        self._adapt_config_file(target_file)

                        self.migration_stats["configs_migrated"] += 1
                        logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ñ–∏–≥: {config_file}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {e}")
            self.migration_stats["errors"].append(f"config_migration: {str(e)}")
            return False

    def _adapt_config_file(self, config_file: Path):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            if config_file.suffix == '.yaml':
                with open(config_file, 'r') as f:
                    config = yaml.safe_load(f)

                # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                if 'ports' in config:
                    config['ports'] = self._adapt_ports(config['ports'])

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ unified-specific –Ω–∞—Å—Ç—Ä–æ–µ–∫
                config['unified_integration'] = {
                    'enabled': True,
                    'unified_api_url': 'http://localhost:8000',
                    'monitoring_enabled': True
                }

                with open(config_file, 'w') as f:
                    yaml.dump(config, f, default_flow_style=False, allow_unicode=True)

            elif config_file.name == 'requirements.txt':
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π unified —Å–∏—Å—Ç–µ–º—ã
                with open(config_file, 'a') as f:
                    f.write('\n# x0tta6bl4-unified dependencies\n')
                    f.write('fastapi==0.104.1\n')
                    f.write('uvicorn[standard]==0.24.0\n')
                    f.write('pydantic==2.5.0\n')

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ {config_file}: {e}")

    def _adapt_ports(self, ports: Dict[str, int]) -> Dict[str, int]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        # –°–º–µ—â–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ x0tta6bl4-next –Ω–∞ +1000
        adapted_ports = {}
        for service, port in ports.items():
            adapted_ports[service] = port + 1000
        return adapted_ports

    def _migrate_k8s_manifests(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤"""
        logger.info("‚ò∏Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤...")

        try:
            target_k8s_dir = self.target_path / "k8s" / "x0tta6bl4_next"

            for k8s_path in self.migration_targets["k8s_manifests"]:
                source_k8s_dir = self.source_path / k8s_path

                if source_k8s_dir.exists():
                    if self.dry_run:
                        logger.info(f"üìã [DRY RUN] –ë—É–¥—É—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã K8s –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã: {k8s_path}")
                    else:
                        target_manifest_dir = target_k8s_dir / k8s_path.split('/')[-1]
                        if target_manifest_dir.exists():
                            shutil.rmtree(target_manifest_dir)
                        shutil.copytree(source_k8s_dir, target_manifest_dir)

                        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
                        self._adapt_k8s_manifests(target_manifest_dir)

                        self.migration_stats["k8s_manifests_migrated"] += 1
                        logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã K8s –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã: {k8s_path}")
                else:
                    logger.warning(f"‚ö†Ô∏è K8s –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {k8s_path}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ K8s –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤: {e}")
            self.migration_stats["errors"].append(f"k8s_migration: {str(e)}")
            return False

    def _adapt_k8s_manifests(self, manifests_dir: Path):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤"""
        try:
            for yaml_file in manifests_dir.rglob("*.yaml"):
                if yaml_file.is_file():
                    with open(yaml_file, 'r') as f:
                        content = f.read()

                    # –ó–∞–º–µ–Ω–∞ namespace
                    content = content.replace('namespace: default', 'namespace: x0tta6bl4-unified')
                    content = content.replace('namespace: x0tta6bl4-next', 'namespace: x0tta6bl4-unified')

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ unified labels
                    if 'metadata:' in content and 'labels:' not in content:
                        content = content.replace('metadata:', 'metadata:\n  labels:\n    app: x0tta6bl4-unified\n    component: x0tta6bl4-next', 1)

                    with open(yaml_file, 'w') as f:
                        f.write(content)

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ K8s –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤: {e}")

    def _migrate_source_code(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"""
        logger.info("üíª –ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞...")

        try:
            target_src_dir = self.target_path / "src" / "x0tta6bl4_next"

            for src_path in self.migration_targets["source_code"]:
                source_src_dir = self.source_path / src_path

                if source_src_dir.exists():
                    if source_src_dir.is_file():
                        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        target_file = target_src_dir / source_src_dir.name
                        if self.dry_run:
                            logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {src_path}")
                        else:
                            target_file.parent.mkdir(parents=True, exist_ok=True)
                            shutil.copy2(source_src_dir, target_file)
                            logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {src_path}")
                    else:
                        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        if self.dry_run:
                            logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {src_path}")
                        else:
                            target_subdir = target_src_dir / source_src_dir.name
                            if target_subdir.exists():
                                shutil.rmtree(target_subdir)
                            shutil.copytree(source_src_dir, target_subdir)
                            logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {src_path}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
            self.migration_stats["errors"].append(f"source_code_migration: {str(e)}")
            return False

    def _migrate_tests(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üß™ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤...")

        try:
            target_tests_dir = self.target_path / "tests" / "x0tta6bl4_next"

            for test_path in self.migration_targets["tests"]:
                source_test_dir = self.source_path / test_path

                if source_test_dir.exists():
                    if self.dry_run:
                        logger.info(f"üìã [DRY RUN] –ë—É–¥—É—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç—ã: {test_path}")
                    else:
                        if target_tests_dir.exists():
                            shutil.rmtree(target_tests_dir)
                        shutil.copytree(source_test_dir, target_tests_dir)

                        self.migration_stats["tests_migrated"] += 1
                        logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç—ã: {test_path}")
                else:
                    logger.warning(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_path}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            self.migration_stats["errors"].append(f"tests_migration: {str(e)}")
            return False

    def _migrate_documentation(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        logger.info("üìö –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")

        try:
            target_docs_dir = self.target_path / "docs" / "x0tta6bl4_next"

            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            docs_to_copy = [
                "README.md",
                "CHANGELOG.md",
                "CONTRIBUTING.md",
                "docs/"
            ]

            for doc_path in docs_to_copy:
                source_doc = self.source_path / doc_path

                if source_doc.exists():
                    if source_doc.is_file():
                        target_file = target_docs_dir / source_doc.name
                        if self.dry_run:
                            logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {doc_path}")
                        else:
                            target_file.parent.mkdir(parents=True, exist_ok=True)
                            shutil.copy2(source_doc, target_file)
                            self.migration_stats["docs_migrated"] += 1
                            logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {doc_path}")
                    else:
                        if self.dry_run:
                            logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {doc_path}")
                        else:
                            target_subdir = target_docs_dir / source_doc.name
                            if target_subdir.exists():
                                shutil.rmtree(target_subdir)
                            shutil.copytree(source_doc, target_subdir)
                            logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {doc_path}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            self.migration_stats["errors"].append(f"documentation_migration: {str(e)}")
            return False

    def get_migration_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        return {
            "source_project": "x0tta6bl4-next",
            "target_project": "x0tta6bl4-unified",
            "timestamp": datetime.now().isoformat(),
            "stats": self.migration_stats,
            "dry_run": self.dry_run
        }