#!/usr/bin/env python3
"""
üöÄ Main Migration Script for x0tta6bl4 Unified
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è x0tta6bl4 –∏ x0tta6bl4-next –≤ x0tta6bl4-unified

Usage:
    python migrate.py [--dry-run] [--rollback] [--validate-only]

Options:
    --dry-run       –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    --rollback      –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
    --validate-only –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
"""

import os
import sys
import json
import argparse
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import subprocess
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('migration.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MigrationOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ x0tta6bl4 Unified"""

    def __init__(self, dry_run: bool = False):
        self.dry_run = dry_run
        self.project_root = Path(__file__).parent.parent.parent
        self.source_x0tta6bl4 = Path("/home/x0tta6bl4")
        self.source_x0tta6bl4_next = Path("/home/x0tta6bl4-next")
        self.target_unified = Path("/home/x0tta6bl4-unified")

        self.migration_plan = {
            "started_at": datetime.now().isoformat(),
            "phases": [
                "pre_migration_checks",
                "data_migration_x0tta6bl4",
                "data_migration_x0tta6bl4_next",
                "config_migration",
                "service_migration",
                "validation",
                "cleanup"
            ],
            "status": "initialized",
            "completed_phases": [],
            "failed_phases": [],
            "warnings": [],
            "errors": []
        }

        # –ò–º–ø–æ—Ä—Ç –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        self.data_migrator_x0tta6bl4 = None
        self.data_migrator_x0tta6bl4_next = None
        self.config_migrator = None
        self.validator = None
        self.rollback_handler = None

    def run_migration(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ x0tta6bl4 Unified")

        try:
            # Phase 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not self._run_phase("pre_migration_checks", self._pre_migration_checks):
                return False

            # Phase 2: –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4
            if not self._run_phase("data_migration_x0tta6bl4", self._migrate_x0tta6bl4_data):
                return False

            # Phase 3: –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4-next
            if not self._run_phase("data_migration_x0tta6bl4_next", self._migrate_x0tta6bl4_next_data):
                return False

            # Phase 4: –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            if not self._run_phase("config_migration", self._migrate_configurations):
                return False

            # Phase 5: –ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            if not self._run_phase("service_migration", self._migrate_services):
                return False

            # Phase 6: –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self._run_phase("validation", self._validate_migration):
                return False

            # Phase 7: –û—á–∏—Å—Ç–∫–∞
            if not self._run_phase("cleanup", self._cleanup):
                return False

            self.migration_plan["status"] = "completed"
            self.migration_plan["completed_at"] = datetime.now().isoformat()

            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            self.migration_plan["status"] = "failed"
            self.migration_plan["error"] = str(e)
            return False

    def run_rollback(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üîÑ –ù–∞—á–∞–ª–æ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")

        try:
            if not self.rollback_handler:
                self.rollback_handler = RollbackHandler(self.migration_plan)

            success = self.rollback_handler.rollback()
            if success:
                logger.info("‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("‚ùå –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")
            return False

    def run_validation_only(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")

        try:
            if not self.validator:
                self.validator = MigrationValidator(self.target_unified)

            success = self.validator.validate_all()
            if success:
                logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—è–≤–∏–ªa –æ—à–∏–±–∫–∏")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False

    def _run_phase(self, phase_name: str, phase_func) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–∑—ã –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–∑—ã: {phase_name}")

        try:
            if self.dry_run:
                logger.info(f"üìã [DRY RUN] –§–∞–∑–∞ {phase_name} –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                self.migration_plan["completed_phases"].append(phase_name)
                return True

            success = phase_func()
            if success:
                logger.info(f"‚úÖ –§–∞–∑–∞ {phase_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                self.migration_plan["completed_phases"].append(phase_name)
            else:
                logger.error(f"‚ùå –§–∞–∑–∞ {phase_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                self.migration_plan["failed_phases"].append(phase_name)

            return success

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–∞–∑–µ {phase_name}: {e}")
            self.migration_plan["failed_phases"].append(phase_name)
            self.migration_plan["errors"].append(f"{phase_name}: {str(e)}")
            return False

    def _pre_migration_checks(self) -> bool:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
        logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫...")

        checks = [
            self._check_source_projects_exist,
            self._check_target_directory_ready,
            self._check_dependencies,
            self._backup_existing_data
        ]

        for check_func in checks:
            if not check_func():
                return False

        logger.info("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True

    def _check_source_projects_exist(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        sources = [
            ("x0tta6bl4", self.source_x0tta6bl4),
            ("x0tta6bl4-next", self.source_x0tta6bl4_next)
        ]

        for name, path in sources:
            if not path.exists():
                logger.error(f"‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
                return False
            logger.info(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç {name} –Ω–∞–π–¥–µ–Ω: {path}")

        return True

    def _check_target_directory_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        if not self.target_unified.exists():
            logger.error(f"‚ùå –¶–µ–ª–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.target_unified}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å
        try:
            test_file = self.target_unified / ".migration_test"
            test_file.write_text("test")
            test_file.unlink()
            logger.info("‚úÖ –¶–µ–ª–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≥–æ—Ç–æ–≤ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥: {e}")
            return False

    def _check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        required_commands = ["python3", "pip", "git"]

        for cmd in required_commands:
            if not shutil.which(cmd):
                logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cmd}")
                return False

        logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        return True

    def _backup_existing_data(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            backup_dir = self.target_unified.parent / f"x0tta6bl4-unified-backup-{datetime.now().strftime('%Y%m%d_%H%M%S')}"

            if self.target_unified.exists():
                if self.dry_run:
                    logger.info(f"üìã [DRY RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_dir}")
                else:
                    shutil.copytree(self.target_unified, backup_dir, dirs_exist_ok=True)
                    logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False

    def _migrate_x0tta6bl4_data(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4"""
        logger.info("üìä –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4...")

        if not self.data_migrator_x0tta6bl4:
            from .data_migration_x0tta6bl4 import X0tta6bl4DataMigrator
            self.data_migrator_x0tta6bl4 = X0tta6bl4DataMigrator(
                self.source_x0tta6bl4,
                self.target_unified,
                dry_run=self.dry_run
            )

        return self.data_migrator_x0tta6bl4.migrate()

    def _migrate_x0tta6bl4_next_data(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4-next"""
        logger.info("üìä –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ x0tta6bl4-next...")

        if not self.data_migrator_x0tta6bl4_next:
            from .data_migration_x0tta6bl4_next import X0tta6bl4NextDataMigrator
            self.data_migrator_x0tta6bl4_next = X0tta6bl4NextDataMigrator(
                self.source_x0tta6bl4_next,
                self.target_unified,
                dry_run=self.dry_run
            )

        return self.data_migrator_x0tta6bl4_next.migrate()

    def _migrate_configurations(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        logger.info("‚öôÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")

        if not self.config_migrator:
            from .config_migration import ConfigurationMigrator
            self.config_migrator = ConfigurationMigrator(
                [self.source_x0tta6bl4, self.source_x0tta6bl4_next],
                self.target_unified,
                dry_run=self.dry_run
            )

        return self.config_migrator.migrate()

    def _migrate_services(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîß –ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        try:
            from .service_migration import ServiceMigrator
            service_migrator = ServiceMigrator(
                [self.source_x0tta6bl4, self.source_x0tta6bl4_next],
                self.target_unified,
                dry_run=self.dry_run
            )
            return service_migrator.migrate()
        except ImportError:
            logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å service_migration –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Ñ–∞–∑—ã")
            return True

    def _validate_migration(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...")

        if not self.validator:
            from .validation import MigrationValidator
            self.validator = MigrationValidator(self.target_unified)

        return self.validator.validate_all()

    def _cleanup(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")

        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏
            report_path = self.target_unified / "migration_report.json"
            with open(report_path, 'w') as f:
                json.dump(self.migration_plan, f, indent=2, ensure_ascii=False)

            logger.info(f"‚úÖ –û—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False

    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        report = f"""
# üìä –û—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ x0tta6bl4 Unified

**–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** {self.migration_plan['started_at']}
**–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {self.migration_plan.get('completed_at', 'N/A')}
**–°—Ç–∞—Ç—É—Å:** {self.migration_plan['status']}

## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–∑—ã:** {len(self.migration_plan['completed_phases'])}
- **–ù–µ—É–¥–∞—á–Ω—ã–µ —Ñ–∞–∑—ã:** {len(self.migration_plan['failed_phases'])}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** {len(self.migration_plan['warnings'])}
- **–û—à–∏–±–∫–∏:** {len(self.migration_plan['errors'])}

## ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–∑—ã

{chr(10).join(f"- ‚úÖ {phase}" for phase in self.migration_plan['completed_phases'])}

## ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ñ–∞–∑—ã

{chr(10).join(f"- ‚ùå {phase}" for phase in self.migration_plan['failed_phases']) if self.migration_plan['failed_phases'] else '- –í—Å–µ —Ñ–∞–∑—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'}

## ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

{chr(10).join(f"- ‚ö†Ô∏è {warning}" for warning in self.migration_plan['warnings']) if self.migration_plan['warnings'] else '- –ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π'}

## üö® –û—à–∏–±–∫–∏

{chr(10).join(f"- üö® {error}" for error in self.migration_plan['errors']) if self.migration_plan['errors'] else '- –ù–µ—Ç –æ—à–∏–±–æ–∫'}

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ x0tta6bl4 Unified*
"""

        return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ú–∏–≥—Ä–∞—Ü–∏—è x0tta6bl4 Unified")
    parser.add_argument("--dry-run", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--rollback", action="store_true", help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏")
    parser.add_argument("--validate-only", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å")

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –æ–ø—Ü–∏–π
    if sum([args.rollback, args.validate_only]) > 1:
        logger.error("‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –æ–ø—Ü–∏—é: --rollback –∏–ª–∏ --validate-only")
        sys.exit(1)

    orchestrator = MigrationOrchestrator(dry_run=args.dry_run)

    if args.rollback:
        success = orchestrator.run_rollback()
    elif args.validate_only:
        success = orchestrator.run_validation_only()
    else:
        success = orchestrator.run_migration()

    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    if not args.dry_run:
        report = orchestrator.generate_report()
        print("\n" + "="*80)
        print(report)
        print("="*80)

    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()