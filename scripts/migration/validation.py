#!/usr/bin/env python3
"""
‚úÖ Migration Validation Script
–°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ x0tta6bl4-unified
"""

import os
import sys
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Tuple
import subprocess
import importlib.util
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MigrationValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""

    def __init__(self, target_path: Path):
        self.target_path = target_path

        self.validation_results = {
            "timestamp": datetime.now().isoformat(),
            "checks_passed": 0,
            "checks_failed": 0,
            "warnings": [],
            "errors": [],
            "components_validated": []
        }

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.validation_checks = [
            self._check_project_structure,
            self._check_config_files,
            self._check_python_imports,
            self._check_service_integrity,
            self._check_database_connectivity,
            self._check_api_endpoints,
            self._check_monitoring_setup,
            self._check_security_config,
            self._validate_quantum_components,
            self._validate_ai_components,
            self._validate_enterprise_components
        ]

    def validate_all(self) -> bool:
        """–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ x0tta6bl4-unified")

        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            for check_func in self.validation_checks:
                check_name = check_func.__name__.replace('_check_', '').replace('_validate_', '')
                logger.info(f"üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_name}")

                try:
                    success, message = check_func()
                    if success:
                        self.validation_results["checks_passed"] += 1
                        logger.info(f"‚úÖ {check_name}: {message}")
                    else:
                        self.validation_results["checks_failed"] += 1
                        logger.error(f"‚ùå {check_name}: {message}")
                        self.validation_results["errors"].append(f"{check_name}: {message}")
                except Exception as e:
                    self.validation_results["checks_failed"] += 1
                    error_msg = f"{check_name}: {str(e)}"
                    logger.error(f"‚ùå {check_name}: {error_msg}")
                    self.validation_results["errors"].append(error_msg)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            self._generate_validation_report()

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = self.validation_results["checks_failed"] == 0
            if success:
                logger.info("üéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.error(f"‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—è–≤–∏–ª–∞ {self.validation_results['checks_failed']} –ø—Ä–æ–±–ª–µ–º")

            return success

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False

    def _check_project_structure(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        required_dirs = [
            "config",
            "production",
            "scripts",
            "tests",
            "docs"
        ]

        missing_dirs = []
        for dir_name in required_dirs:
            if not (self.target_path / dir_name).exists():
                missing_dirs.append(dir_name)

        if missing_dirs:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(missing_dirs)}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [
            "main.py",
            "requirements.txt",
            "config/unified_config.yaml"
        ]

        missing_files = []
        for file_name in required_files:
            if not (self.target_path / file_name).exists():
                missing_files.append(file_name)

        if missing_files:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}"

        return True, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"

    def _check_config_files(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        config_checks = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ unified –∫–æ–Ω—Ñ–∏–≥–∞
        unified_config = self.target_path / "config" / "unified_config.yaml"
        if unified_config.exists():
            try:
                with open(unified_config, 'r') as f:
                    config = yaml.safe_load(f)

                required_keys = ['system', 'sources', 'merged_configs']
                for key in required_keys:
                    if key not in config:
                        config_checks.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ unified_config.yaml")

                if 'system' in config:
                    system_keys = ['name', 'version', 'environment']
                    for key in system_keys:
                        if key not in config['system']:
                            config_checks.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–ª—é—á '{key}'")

            except Exception as e:
                config_checks.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è unified_config.yaml: {e}")
        else:
            config_checks.append("–§–∞–π–ª unified_config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_config = self.target_path / "config" / "migration_config.json"
        if migration_config.exists():
            try:
                with open(migration_config, 'r') as f:
                    config = json.load(f)

                if 'migration' not in config:
                    config_checks.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'migration' –≤ migration_config.json")

            except Exception as e:
                config_checks.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è migration_config.json: {e}")
        else:
            config_checks.append("–§–∞–π–ª migration_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if config_checks:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {'; '.join(config_checks)}"

        return True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"

    def _check_python_imports(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ Python"""
        import_issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        main_modules = [
            "main",
            "production.quantum",
            "production.ai",
            "production.enterprise",
            "production.api"
        ]

        for module in main_modules:
            try:
                spec = importlib.util.find_spec(module)
                if spec is None:
                    import_issues.append(f"–ú–æ–¥—É–ª—å {module} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                import_issues.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module}: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
        requirements_file = self.target_path / "requirements.txt"
        if requirements_file.exists():
            try:
                with open(requirements_file, 'r') as f:
                    requirements = f.read().strip()
                    if not requirements:
                        import_issues.append("–§–∞–π–ª requirements.txt –ø—É—Å—Ç")
            except Exception as e:
                import_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}")
        else:
            import_issues.append("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if import_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏: {'; '.join(import_issues)}"

        return True, "–ò–º–ø–æ—Ä—Ç—ã Python –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"

    def _check_service_integrity(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        service_issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        services_dir = self.target_path / "production" / "services"
        if services_dir.exists():
            expected_services = [
                "quantum_performance_predictor",
                "quantum_auto_scaler",
                "phi_harmonic_load_balancer",
                "api_gateway",
                "mesh_api"
            ]

            found_services = []
            for service_dir in services_dir.iterdir():
                if service_dir.is_dir():
                    found_services.append(service_dir.name)

            missing_services = set(expected_services) - set(found_services)
            if missing_services:
                service_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ—Ä–≤–∏—Å—ã: {', '.join(missing_services)}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è app.py –≤ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–∏—Å–µ
            for service in found_services:
                app_file = services_dir / service / "app.py"
                if not app_file.exists():
                    service_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç app.py –≤ —Å–µ—Ä–≤–∏—Å–µ {service}")
        else:
            service_issues.append("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è production/services –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        if service_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏: {'; '.join(service_issues)}"

        return True, "–°–µ—Ä–≤–∏—Å—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"

    def _check_database_connectivity(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        unified_config = self.target_path / "config" / "unified_config.yaml"
        if unified_config.exists():
            try:
                with open(unified_config, 'r') as f:
                    config = yaml.safe_load(f)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î
                if 'database' in config.get('merged_configs', {}):
                    db_config = config['merged_configs']['database']
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    return True, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã"
                else:
                    return True, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"

            except Exception as e:
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î: {e}"

        return True, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–æ–ø—É—â–µ–Ω–∞"

    def _check_api_endpoints(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"""
        api_issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API —Ñ–∞–π–ª–∞
        main_api = self.target_path / "production" / "api" / "main.py"
        if main_api.exists():
            try:
                with open(main_api, 'r') as f:
                    content = f.read()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
                required_endpoints = [
                    "/health",
                    "/api/v1/quantum/status",
                    "/api/v1/ai/status",
                    "/api/v1/enterprise/status"
                ]

                for endpoint in required_endpoints:
                    if endpoint not in content:
                        api_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç endpoint {endpoint}")

            except Exception as e:
                api_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è API —Ñ–∞–π–ª–∞: {e}")
        else:
            api_issues.append("–§–∞–π–ª production/api/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if api_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã —Å API: {'; '.join(api_issues)}"

        return True, "API endpoints –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"

    def _check_monitoring_setup(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        monitoring_issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_config = self.target_path / "config" / "monitoring_config.yaml"
        if monitoring_config.exists():
            try:
                with open(monitoring_config, 'r') as f:
                    config = yaml.safe_load(f)

                required_sections = ['prometheus', 'grafana']
                for section in required_sections:
                    if section not in config:
                        monitoring_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è {section} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

            except Exception as e:
                monitoring_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        else:
            monitoring_issues.append("–§–∞–π–ª monitoring_config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ unified –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        unified_monitoring = self.target_path / "production" / "monitoring" / "unified_monitoring.py"
        if not unified_monitoring.exists():
            monitoring_issues.append("–§–∞–π–ª unified_monitoring.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if monitoring_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º: {'; '.join(monitoring_issues)}"

        return True, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

    def _check_security_config(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security_issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ unified –∫–æ–Ω—Ñ–∏–≥–µ
        unified_config = self.target_path / "config" / "unified_config.yaml"
        if unified_config.exists():
            try:
                with open(unified_config, 'r') as f:
                    config = yaml.safe_load(f)

                merged_configs = config.get('merged_configs', {})
                if 'security' in merged_configs:
                    security_config = merged_configs['security']

                    required_security = ['encryption', 'authentication']
                    for sec_item in required_security:
                        if sec_item not in security_config:
                            security_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {sec_item}")
                else:
                    security_issues.append("–°–µ–∫—Ü–∏—è security –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

            except Exception as e:
                security_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")

        if security_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é: {'; '.join(security_issues)}"

        return True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"

    def _validate_quantum_components(self) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        quantum_issues = []

        quantum_dir = self.target_path / "production" / "quantum"
        if quantum_dir.exists():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            required_files = ["__init__.py", "quantum_config.py"]
            for file_name in required_files:
                if not (quantum_dir / file_name).exists():
                    quantum_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª {file_name} –≤ quantum –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_file = quantum_dir / "quantum_config.py"
            if config_file.exists():
                try:
                    with open(config_file, 'r') as f:
                        content = f.read()

                    required_configs = ["QUANTUM_PROVIDERS", "QUANTUM_ALGORITHMS"]
                    for config in required_configs:
                        if config not in content:
                            quantum_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config}")

                except Exception as e:
                    quantum_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è quantum –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        else:
            quantum_issues.append("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è production/quantum –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        if quantum_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–≤–∞–Ω—Ç–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏: {'; '.join(quantum_issues)}"

        return True, "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∞–ª–∏–¥–Ω—ã"

    def _validate_ai_components(self) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        ai_issues = []

        ai_dir = self.target_path / "production" / "ai"
        if ai_dir.exists():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_file = ai_dir / "ai_config.py"
            if config_file.exists():
                try:
                    with open(config_file, 'r') as f:
                        content = f.read()

                    required_configs = ["AI_MODELS", "ML_FRAMEWORKS"]
                    for config in required_configs:
                        if config not in content:
                            ai_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config}")

                except Exception as e:
                    ai_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            else:
                ai_issues.append("–§–∞–π–ª ai_config.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            ai_issues.append("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è production/ai –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        if ai_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã —Å AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏: {'; '.join(ai_issues)}"

        return True, "AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∞–ª–∏–¥–Ω—ã"

    def _validate_enterprise_components(self) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è enterprise –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        enterprise_issues = []

        enterprise_dir = self.target_path / "production" / "enterprise"
        if enterprise_dir.exists():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_file = enterprise_dir / "enterprise_config.py"
            if config_file.exists():
                try:
                    with open(config_file, 'r') as f:
                        content = f.read()

                    required_configs = ["ENTERPRISE_FEATURES", "API_GATEWAY"]
                    for config in required_configs:
                        if config not in content:
                            enterprise_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç enterprise –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config}")

                except Exception as e:
                    enterprise_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è enterprise –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            else:
                enterprise_issues.append("–§–∞–π–ª enterprise_config.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            enterprise_issues.append("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è production/enterprise –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        if enterprise_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã —Å enterprise –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏: {'; '.join(enterprise_issues)}"

        return True, "Enterprise –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∞–ª–∏–¥–Ω—ã"

    def _generate_validation_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")

        report = {
            "validation_report": {
                "timestamp": self.validation_results["timestamp"],
                "summary": {
                    "checks_passed": self.validation_results["checks_passed"],
                    "checks_failed": self.validation_results["checks_failed"],
                    "total_checks": self.validation_results["checks_passed"] + self.validation_results["checks_failed"],
                    "success_rate": (self.validation_results["checks_passed"] /
                                   (self.validation_results["checks_passed"] + self.validation_results["checks_failed"]) * 100)
                    if (self.validation_results["checks_passed"] + self.validation_results["checks_failed"]) > 0 else 0
                },
                "components_validated": self.validation_results["components_validated"],
                "warnings": self.validation_results["warnings"],
                "errors": self.validation_results["errors"]
            }
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = self.target_path / "validation_report.json"
        try:
            with open(report_file, 'w') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            logger.info(f"‚úÖ –û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

    def get_validation_results(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return self.validation_results