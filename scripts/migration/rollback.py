#!/usr/bin/env python3
"""
üîÑ Migration Rollback Script
–°–∫—Ä–∏–ø—Ç –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ x0tta6bl4-unified
"""

import os
import sys
import json
import shutil
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RollbackHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""

    def __init__(self, migration_plan: Optional[Dict[str, Any]] = None):
        self.migration_plan = migration_plan or self._load_migration_plan()
        self.rollback_results = {
            "timestamp": datetime.now().isoformat(),
            "steps_completed": 0,
            "steps_failed": 0,
            "errors": [],
            "warnings": []
        }

    def rollback(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üîÑ –ù–∞—á–∞–ª–æ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ x0tta6bl4-unified")

        if not self.migration_plan:
            logger.error("‚ùå –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞—Ç–∞
            if not self._can_rollback():
                logger.error("‚ùå –û—Ç–∫–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è")
                return False

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤ –æ—Ç–∫–∞—Ç–∞
            rollback_steps = [
                self._stop_services,
                self._restore_backup,
                self._cleanup_unified_files,
                self._restore_original_configs,
                self._restart_services
            ]

            for step_func in rollback_steps:
                step_name = step_func.__name__.replace('_', ' ')
                logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ –æ—Ç–∫–∞—Ç–∞: {step_name}")

                try:
                    success = step_func()
                    if success:
                        self.rollback_results["steps_completed"] += 1
                        logger.info(f"‚úÖ –®–∞–≥ {step_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        self.rollback_results["steps_failed"] += 1
                        logger.error(f"‚ùå –®–∞–≥ {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —à–∞–≥–∞–º–∏
                except Exception as e:
                    self.rollback_results["steps_failed"] += 1
                    error_msg = f"{step_name}: {str(e)}"
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step_name}: {e}")
                    self.rollback_results["errors"].append(error_msg)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—Ç–∫–∞—Ç–µ
            self._generate_rollback_report()

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = self.rollback_results["steps_failed"] == 0
            if success:
                logger.info("üéâ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.error(f"‚ö†Ô∏è –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å {self.rollback_results['steps_failed']} –æ—à–∏–±–∫–∞–º–∏")

            return success

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")
            return False

    def _can_rollback(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞—Ç–∞"""
        checks = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        if not self.migration_plan:
            checks.append("–ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_dir = self._find_backup_directory()
        if not backup_dir or not backup_dir.exists():
            checks.append("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        if self.migration_plan.get("status") != "completed":
            checks.append("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        if checks:
            logger.error(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç: {'; '.join(checks)}")
            return False

        logger.info("‚úÖ –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True

    def _find_backup_directory(self) -> Optional[Path]:
        """–ü–æ–∏—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π"""
        project_root = Path(__file__).parent.parent.parent

        # –ü–æ–∏—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –º–µ—Å—Ç–µ
        backup_base = project_root.parent
        backup_pattern = "x0tta6bl4-unified-backup-*"

        for backup_dir in backup_base.glob(backup_pattern):
            if backup_dir.is_dir():
                return backup_dir

        return None

    def _load_migration_plan(self) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        project_root = Path(__file__).parent.parent.parent
        migration_report = project_root / "migration_report.json"

        if migration_report.exists():
            try:
                with open(migration_report, 'r') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

        return None

    def _stop_services(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")

        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
            result = subprocess.run(
                ["docker-compose", "down"],
                cwd=Path(__file__).parent.parent.parent,
                capture_output=True,
                text=True,
                timeout=60
            )

            if result.returncode != 0:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Docker: {result.stderr}")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ x0tta6bl4

            return True

        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False

    def _restore_backup(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        logger.info("üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")

        try:
            project_root = Path(__file__).parent.parent.parent
            backup_dir = self._find_backup_directory()

            if not backup_dir:
                logger.error("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º
            current_backup = project_root.parent / f"x0tta6bl4-unified-pre-rollback-{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            if project_root.exists():
                shutil.copytree(project_root, current_backup, dirs_exist_ok=True)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_backup}")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            for item in project_root.iterdir():
                if item.name.startswith('.git'):
                    continue  # –°–æ—Ö—Ä–∞–Ω—è–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                if item.is_file():
                    item.unlink()
                else:
                    shutil.rmtree(item)

            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            for item in backup_dir.iterdir():
                if item.is_file():
                    shutil.copy2(item, project_root / item.name)
                else:
                    shutil.copytree(item, project_root / item.name, dirs_exist_ok=True)

            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_dir}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False

    def _cleanup_unified_files(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ unified —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ unified —Å–∏—Å—Ç–µ–º—ã...")

        try:
            project_root = Path(__file__).parent.parent.parent

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ unified
            unified_files = [
                "main.py",
                "config/unified_config.yaml",
                "config/migration_config.json",
                "migration_report.json",
                "validation_report.json"
            ]

            for file_path in unified_files:
                full_path = project_root / file_path
                if full_path.exists():
                    if full_path.is_file():
                        full_path.unlink()
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                    else:
                        shutil.rmtree(full_path)
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {file_path}")

            # –£–¥–∞–ª–µ–Ω–∏–µ production –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏)
            production_dir = project_root / "production"
            if production_dir.exists():
                shutil.rmtree(production_dir)
                logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è production")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ unified —Ñ–∞–π–ª–æ–≤: {e}")
            return False

    def _restore_original_configs(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        logger.info("‚öôÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")

        try:
            project_root = Path(__file__).parent.parent.parent

            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ legacy –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            legacy_dirs = [
                ("config/legacy", "config"),
                ("docs/legacy_x0tta6bl4", "docs"),
                ("data/legacy_databases", "data")
            ]

            for legacy_dir, target_dir in legacy_dirs:
                legacy_path = project_root / legacy_dir
                target_path = project_root / target_dir

                if legacy_path.exists():
                    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ
                    for item in legacy_path.iterdir():
                        dest = target_path / item.name
                        if item.is_file():
                            shutil.copy2(item, dest)
                        else:
                            if dest.exists():
                                shutil.rmtree(dest)
                            shutil.copytree(item, dest)

                    # –£–¥–∞–ª–µ–Ω–∏–µ legacy –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    shutil.rmtree(legacy_path)
                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ {legacy_dir}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return False

    def _restart_services(self) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")

        try:
            project_root = Path(__file__).parent.parent.parent

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
            result = subprocess.run(
                ["docker-compose", "up", "-d"],
                cwd=project_root,
                capture_output=True,
                text=True,
                timeout=120
            )

            if result.returncode != 0:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Docker: {result.stderr}")
                return False

            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")
            return True

        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False

    def _generate_rollback_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—Ç–∫–∞—Ç–µ"""
        logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—Ç–∫–∞—Ç–µ...")

        report = {
            "rollback_report": {
                "timestamp": self.rollback_results["timestamp"],
                "migration_plan": self.migration_plan.get("started_at", "unknown") if self.migration_plan else "unknown",
                "summary": {
                    "steps_completed": self.rollback_results["steps_completed"],
                    "steps_failed": self.rollback_results["steps_failed"],
                    "total_steps": self.rollback_results["steps_completed"] + self.rollback_results["steps_failed"],
                    "success_rate": (self.rollback_results["steps_completed"] /
                                   (self.rollback_results["steps_completed"] + self.rollback_results["steps_failed"]) * 100)
                    if (self.rollback_results["steps_completed"] + self.rollback_results["steps_failed"]) > 0 else 0
                },
                "errors": self.rollback_results["errors"],
                "warnings": self.rollback_results["warnings"]
            }
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        project_root = Path(__file__).parent.parent.parent
        report_file = project_root / "rollback_report.json"
        try:
            with open(report_file, 'w') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            logger.info(f"‚úÖ –û—Ç—á–µ—Ç –æ–± –æ—Ç–∫–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—Ç–∫–∞—Ç–µ: {e}")

    def get_rollback_results(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–∫–∞—Ç–∞"""
        return self.rollback_results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ x0tta6bl4 Unified")
    parser.add_argument("--force", action="store_true", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
    parser.add_argument("--migration-report", type=str, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏")

    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    migration_plan = None
    if args.migration_report:
        try:
            with open(args.migration_report, 'r') as f:
                migration_plan = json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)

    rollback_handler = RollbackHandler(migration_plan)

    if args.force:
        logger.warning("‚ö†Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç!")

    success = rollback_handler.rollback()

    if success:
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û–°–õ–ï –û–¢–ö–ê–¢–ê:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
        print("- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    else:
        print("\nüîß –ü–†–û–ë–õ–ï–ú–´ –ü–†–ò –û–¢–ö–ê–¢–ï:")
        print("- –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –æ—Ç–∫–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        print("- –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")

    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()