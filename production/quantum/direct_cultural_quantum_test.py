#!/usr/bin/env python3
"""
üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Cultural Quantum –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
==========================================

–¢–µ—Å—Ç —Å –ø—Ä—è–º—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""

import sys
import time
import asyncio
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('src')

def test_direct_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –ü—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
        import importlib.util
        
        # –¢–µ—Å—Ç 1: Cultural Quantum Avatars
        print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cultural Quantum Avatars...")
        avatars_path = 'src/x0tta6bl4/ai/cultural_quantum_avatars.py'
        if os.path.exists(avatars_path):
            spec = importlib.util.spec_from_file_location("cultural_quantum_avatars", avatars_path)
            avatars_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(avatars_module)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤–∞—Ç–∞—Ä–æ–≤
            avatar_manager = avatars_module.CulturalQuantumAvatarManager()
            print("   ‚úÖ Cultural Quantum Avatar Manager —Å–æ–∑–¥–∞–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã
            for archetype in ["–∏–≤–∞–Ω-–¥—É—Ä–∞–∫", "–≤–∞—Å–∏–ª–∏—Å–∞-–ø—Ä–µ–º—É–¥—Ä–∞—è", "–∫–æ—â–µ–π-–±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π"]:
                avatar = avatar_manager.create_avatar(archetype)
                if avatar:
                    print(f"   ‚úÖ –ê–≤–∞—Ç–∞—Ä {archetype} —Å–æ–∑–¥–∞–Ω: œÜ-–≥–∞—Ä–º–æ–Ω–∏—è {avatar.phi_harmony_score:.3f}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {archetype}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
            response = avatar_manager.generate_quantum_response("–¢–µ—Å—Ç œÜ-–≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            print(f"   üß† –ö–≤–∞–Ω—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {response.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:50]}...")
            print(f"   üß† –ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å: {response.get('cultural_resonance', 0):.3f}")
            
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {avatars_path}")
        
        # –¢–µ—Å—Ç 2: Anti-Hallucination System
        print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Anti-Hallucination System...")
        anti_hall_path = 'src/x0tta6bl4/security/sber_anti_hallucination.py'
        if os.path.exists(anti_hall_path):
            spec = importlib.util.spec_from_file_location("sber_anti_hallucination", anti_hall_path)
            anti_hall_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(anti_hall_module)
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É anti-hallucination
            anti_hall = anti_hall_module.SberAntiHallucinationSystem()
            print("   ‚úÖ Anti-Hallucination System —Å–æ–∑–¥–∞–Ω–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
            test_texts = [
                "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è –≤ œÜ-–≥–∞—Ä–º–æ–Ω–∏–∏",
                "–Ø –Ω–µ –∑–Ω–∞—é, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è",
                "–°–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º, œÜ-–≥–∞—Ä–º–æ–Ω–∏—è —Ä–∞–≤–Ω–∞ 1.618"
            ]
            
            for text in test_texts:
                result = anti_hall.detect_hallucinations(text)
                print(f"   üìù '{text[:30]}...' -> –ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è: {result.get('is_hallucination', False)}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.2f}")
            
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {anti_hall_path}")
        
        # –¢–µ—Å—Ç 3: Qwen Image Generator
        print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Qwen Image Generator...")
        image_gen_path = 'src/x0tta6bl4/ai/qwen_phi_image_generator.py'
        if os.path.exists(image_gen_path):
            spec = importlib.util.spec_from_file_location("qwen_phi_image_generator", image_gen_path)
            image_gen_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(image_gen_module)
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_generator = image_gen_module.PhiOptimizedQwenImage()
            print("   ‚úÖ Qwen Image Generator —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_result = image_generator.generate_with_phi_harmony(
                "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —ç–≤–æ–ª—é—Ü–∏—è —á–µ—Ä–µ–∑ œÜ-–≥–∞—Ä–º–æ–Ω–∏—é",
                "—ç–≤–æ–ª—é—Ü–∏—è",
                "–∫–≤–∞–Ω—Ç–æ–≤—ã–π —Ä–µ–∞–ª–∏–∑–º"
            )
            
            print(f"   üé® œÜ-–≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Ä: {image_result.get('phi_harmony_score', 0):.3f}")
            print(f"   üé® –£—Å–ø–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {image_result.get('generation_success', False)}")
            
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_gen_path}")
        
        # –¢–µ—Å—Ç 4: Cultural Quantum Integration
        print("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cultural Quantum Integration...")
        integration_path = 'src/x0tta6bl4/integration/cultural_quantum_integration.py'
        if os.path.exists(integration_path):
            spec = importlib.util.spec_from_file_location("cultural_quantum_integration", integration_path)
            integration_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(integration_module)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            integration = integration_module.CulturalQuantumIntegration()
            print("   ‚úÖ Cultural Quantum Integration —Å–æ–∑–¥–∞–Ω–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            async def test_integration():
                try:
                    integration_result = await integration.process_cultural_quantum_request(
                        "–¢–µ—Å—Ç –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
                        "–∏–≤–∞–Ω-–¥—É—Ä–∞–∫",
                        "—Ç–µ—Å—Ç–æ–≤—ã–π",
                        "—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∞–ª–∏–∑–º"
                    )
                    return integration_result
                except Exception as e:
                    return {"error": str(e)}
            
            integration_result = asyncio.run(test_integration())
            
            if "error" not in integration_result:
                print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {integration_result.get('processing_time', 0):.3f}s")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {integration_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {integration_path}")
        
        print("\nüéâ –í–°–ï –ü–†–Ø–ú–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–Ø–ú–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_evolution_engine_simple():
    """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Evolution Engine"""
    print("\nüîó –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Evolution Engine...")
    
    try:
        # –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç Evolution Engine
        evolution_path = 'src/x0tta6bl4/evolution/evolution_engine.py'
        if os.path.exists(evolution_path):
            spec = importlib.util.spec_from_file_location("evolution_engine", evolution_path)
            evolution_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(evolution_module)
            
            print("   ‚úÖ Evolution Engine –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = evolution_module.EvolutionConfig()
            print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —ç–≤–æ–ª—é—Ü–∏–∏
            engine = evolution_module.EvolutionEngine(config)
            print("   ‚úÖ Evolution Engine —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            print(f"   üé≠ Cultural Quantum –¥–æ—Å—Ç—É–ø–µ–Ω: {hasattr(engine, 'cultural_avatar_manager')}")
            print(f"   üé≠ Anti-Hallucination –¥–æ—Å—Ç—É–ø–µ–Ω: {hasattr(engine, 'anti_hallucination_system')}")
            print(f"   üé≠ Image Generator –¥–æ—Å—Ç—É–ø–µ–Ω: {hasattr(engine, 'image_generator')}")
            
            return True
            
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {evolution_path}")
            return False
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Evolution Engine: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Cultural Quantum –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø—Ä—è–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    direct_ok = test_direct_imports()
    
    # –¢–µ—Å—Ç Evolution Engine
    evolution_ok = test_evolution_engine_simple()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ü—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {'‚úÖ OK' if direct_ok else '‚ùå FAIL'}")
    print(f"   Evolution Engine: {'‚úÖ OK' if evolution_ok else '‚ùå FAIL'}")
    
    if direct_ok and evolution_ok:
        print("\nüéâ –í–°–ï –ü–†–Ø–ú–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ Cultural Quantum –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == "__main__":
    main()
