#!/usr/bin/env python3
"""
üîê QUANTUM CRYPTOGRAPHY - Edge quantum-secure –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
Quantum Key Distribution (QKD) –∏ quantum-resistant —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""

import asyncio
import time
import json
import logging
import secrets
import hashlib
import hmac
from typing import Dict, Any, List, Optional, Tuple, Union
from enum import Enum
from dataclasses import dataclass
from datetime import datetime
import numpy as np
import base64

# –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
from ...base_interface import BaseComponent

# –ò–º–ø–æ—Ä—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
try:
    from ...quantum.quantum_interface import QuantumCore
    QUANTUM_AVAILABLE = True
except ImportError:
    QUANTUM_AVAILABLE = False
    QuantumCore = None

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã x0tta6bl4
PHI_RATIO = 1.618033988749895
QUANTUM_FACTOR = 2.718281828459045

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EncryptionAlgorithm(Enum):
    """–ê–ª–≥–æ—Ä–∏—Ç–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    AES_256_GCM = "aes_256_gcm"
    CHACHA20_POLY1305 = "chacha20_poly1305"
    QUANTUM_RESISTANT_KYBER = "kyber"
    QUANTUM_RESISTANT_DILITHIUM = "dilithium"
    HYBRID_QUANTUM_CLASSICAL = "hybrid"

class KeyExchangeProtocol(Enum):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª—ã –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏"""
    DIFFIE_HELLMAN = "diffie_hellman"
    ECDH_P384 = "ecdh_p384"
    QUANTUM_KEY_DISTRIBUTION = "qkd"
    POST_QUANTUM_KEM = "post_quantum_kem"

class SecurityLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    STANDARD = "standard"
    HIGH = "high"
    QUANTUM_SAFE = "quantum_safe"
    MAXIMUM = "maximum"

@dataclass
class QuantumKey:
    """–ö–≤–∞–Ω—Ç–æ–≤—ã–π –∫–ª—é—á"""
    key_id: str
    key_material: bytes
    algorithm: EncryptionAlgorithm
    key_length: int
    generation_time: datetime
    expiry_time: Optional[datetime]
    security_level: SecurityLevel
    quantum_generated: bool
    phi_entropy: float

@dataclass
class SecureChannel:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏"""
    channel_id: str
    participants: List[str]
    encryption_key: QuantumKey
    protocol: KeyExchangeProtocol
    established_time: datetime
    last_activity: datetime
    message_count: int
    security_status: str

@dataclass
class EncryptedMessage:
    """–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    message_id: str
    sender: str
    recipient: str
    ciphertext: bytes
    nonce: bytes
    auth_tag: bytes
    timestamp: datetime
    algorithm: EncryptionAlgorithm
    key_id: str

class QuantumCryptography(BaseComponent):
    """Quantum-enhanced cryptography –¥–ª—è edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""

    def __init__(self):
        super().__init__("quantum_cryptography")

        # –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.quantum_core = None

        # –°–∏—Å—Ç–µ–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        self.key_manager = None
        self.encryption_engine = None
        self.qkd_system = None
        self.post_quantum_crypto = None

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏
        self.active_keys: Dict[str, QuantumKey] = {}
        self.key_history: List[QuantumKey] = []
        self.key_rotation_schedule: Dict[str, datetime] = {}

        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        self.secure_channels: Dict[str, SecureChannel] = {}
        self.channel_history: Dict[str, List[SecureChannel]] = {}

        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_log: List[EncryptedMessage] = []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.encryption_operations = 0
        self.key_generations = 0
        self.security_breaches = 0
        self.qkd_sessions = 0

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.quantum_safe = True
        self.key_rotation_interval_hours = 24
        self.max_key_age_days = 7
        self.security_level = SecurityLevel.QUANTUM_SAFE

        logger.info("Quantum Cryptography initialized")

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quantum Cryptography"""
        try:
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quantum Cryptography...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ core
            if QUANTUM_AVAILABLE:
                self.quantum_core = QuantumCore()
                quantum_init = await self.quantum_core.initialize()
                if quantum_init:
                    self.logger.info("Quantum Core –¥–ª—è cryptography —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    self.logger.warning("Quantum Core –¥–ª—è cryptography –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            await self._initialize_crypto_systems()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
            await self._generate_initial_keys()

            self.set_status("operational")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Quantum Cryptography: {e}")
            self.set_status("failed")
            return False

    async def _initialize_crypto_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º"""
        try:
            # Key manager
            self.key_manager = {
                "supported_algorithms": [alg.value for alg in EncryptionAlgorithm],
                "key_storage": "quantum_secure_vault",
                "rotation_policy": "automatic",
                "backup_enabled": True
            }

            # Encryption engine
            self.encryption_engine = {
                "primary_algorithm": EncryptionAlgorithm.QUANTUM_RESISTANT_KYBER,
                "fallback_algorithm": EncryptionAlgorithm.AES_256_GCM,
                "performance_mode": "balanced",
                "hardware_acceleration": True
            }

            # QKD system
            self.qkd_system = {
                "protocol": "BB84",
                "key_rate": 1000,  # bits per second
                "distance_limit": 100,  # km
                "error_correction": "cascade",
                "privacy_amplification": True
            }

            # Post-quantum crypto
            self.post_quantum_crypto = {
                "kem_algorithm": "Kyber768",
                "signature_algorithm": "Dilithium3",
                "compatibility_mode": "hybrid"
            }

            self.logger.info("–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º: {e}")

    async def _generate_initial_keys(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞
            master_key = await self._generate_quantum_key(
                algorithm=EncryptionAlgorithm.QUANTUM_RESISTANT_KYBER,
                key_length=256,
                security_level=SecurityLevel.MAXIMUM
            )

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π
            session_key = await self._generate_quantum_key(
                algorithm=EncryptionAlgorithm.AES_256_GCM,
                key_length=256,
                security_level=SecurityLevel.QUANTUM_SAFE
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π
            self.active_keys["master"] = master_key
            self.active_keys["session"] = session_key

            self.logger.info("–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π: {e}")

    async def process_inference(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ cryptographic inference"""
        try:
            operation = input_data.get("operation", "encrypt")

            if operation == "encrypt":
                return await self._encrypt_message(input_data)
            elif operation == "decrypt":
                return await self._decrypt_message(input_data)
            elif operation == "key_exchange":
                return await self._perform_key_exchange(input_data)
            elif operation == "establish_channel":
                return await self._establish_secure_channel(input_data)
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ cryptographic inference: {e}")
            return {"error": str(e), "operation": input_data.get("operation", "unknown")}

    async def process_quantum_inference(self, input_data: Dict[str, Any], quantum_state: Any, entanglement: Dict[str, Any]) -> Dict[str, Any]:
        """Quantum-enhanced cryptographic processing"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            base_result = await self.process_inference(input_data)

            if not self.quantum_core or "error" in base_result:
                return base_result

            operation = input_data.get("operation", "encrypt")

            # Quantum enhancement –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if operation in ["encrypt", "decrypt"]:
                quantum_enhanced = await self._apply_quantum_crypto_enhancement(
                    base_result, quantum_state, entanglement
                )
            elif operation == "key_exchange":
                quantum_enhanced = await self._apply_quantum_key_exchange_enhancement(
                    base_result, quantum_state, entanglement
                )
            else:
                quantum_enhanced = {}

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            enhanced_result = base_result.copy()
            enhanced_result.update({
                "quantum_security_boost": quantum_enhanced.get("security_boost", 0),
                "entanglement_strength": entanglement.get("entanglement_strength", 0),
                "phi_cryptographic_score": quantum_enhanced.get("phi_score", PHI_RATIO)
            })

            return enhanced_result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ quantum cryptographic inference: {e}")
            return await self.process_inference(input_data)

    async def _encrypt_message(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            plaintext = input_data.get("plaintext", "")
            if isinstance(plaintext, str):
                plaintext = plaintext.encode('utf-8')

            recipient = input_data.get("recipient", "default")
            algorithm = EncryptionAlgorithm(input_data.get("algorithm", "aes_256_gcm"))

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
            key = await self._get_encryption_key(recipient, algorithm)

            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            ciphertext, nonce, auth_tag = await self._perform_encryption(plaintext, key)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = EncryptedMessage(
                message_id=secrets.token_hex(16),
                sender=input_data.get("sender", "system"),
                recipient=recipient,
                ciphertext=ciphertext,
                nonce=nonce,
                auth_tag=auth_tag,
                timestamp=datetime.now(),
                algorithm=algorithm,
                key_id=key.key_id
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–≥
            self.message_log.append(message)

            # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            result = {
                "message_id": message.message_id,
                "ciphertext": base64.b64encode(ciphertext).decode('utf-8'),
                "nonce": base64.b64encode(nonce).decode('utf-8'),
                "auth_tag": base64.b64encode(auth_tag).decode('utf-8'),
                "algorithm": algorithm.value,
                "key_id": key.key_id,
                "timestamp": message.timestamp.isoformat(),
                "quantum_secure": key.quantum_generated
            }

            self.encryption_operations += 1
            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"error": str(e)}

    async def _decrypt_message(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            ciphertext = base64.b64decode(input_data["ciphertext"])
            nonce = base64.b64decode(input_data["nonce"])
            auth_tag = base64.b64decode(input_data["auth_tag"])
            key_id = input_data["key_id"]
            algorithm = EncryptionAlgorithm(input_data.get("algorithm", "aes_256_gcm"))

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞
            key = self.active_keys.get(key_id)
            if not key:
                raise ValueError(f"–ö–ª—é—á {key_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
            plaintext = await self._perform_decryption(ciphertext, nonce, auth_tag, key)

            result = {
                "plaintext": plaintext.decode('utf-8'),
                "algorithm": algorithm.value,
                "key_id": key_id,
                "decryption_time": datetime.now().isoformat(),
                "quantum_secure": key.quantum_generated
            }

            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"error": str(e)}

    async def _perform_key_exchange(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏"""
        try:
            protocol = KeyExchangeProtocol(input_data.get("protocol", "qkd"))
            participants = input_data.get("participants", [])

            if protocol == KeyExchangeProtocol.QUANTUM_KEY_DISTRIBUTION:
                # QKD key exchange
                key = await self._perform_qkd_key_exchange(participants)
            elif protocol == KeyExchangeProtocol.POST_QUANTUM_KEM:
                # Post-quantum KEM
                key = await self._perform_post_quantum_kem(participants)
            else:
                # Classical key exchange
                key = await self._perform_classical_key_exchange(participants, protocol)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞
            session_key_id = f"session_{secrets.token_hex(8)}"
            self.active_keys[session_key_id] = key

            result = {
                "key_id": key.key_id,
                "session_key_id": session_key_id,
                "protocol": protocol.value,
                "participants": participants,
                "security_level": key.security_level.value,
                "quantum_generated": key.quantum_generated,
                "established_time": datetime.now().isoformat()
            }

            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏: {e}")
            return {"error": str(e)}

    async def _establish_secure_channel(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            channel_id = input_data.get("channel_id", secrets.token_hex(16))
            participants = input_data.get("participants", [])

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            channel = SecureChannel(
                channel_id=channel_id,
                participants=participants,
                encryption_key=self.active_keys.get("session"),
                protocol=KeyExchangeProtocol.QUANTUM_KEY_DISTRIBUTION,
                established_time=datetime.now(),
                last_activity=datetime.now(),
                message_count=0,
                security_status="active"
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            self.secure_channels[channel_id] = channel

            result = {
                "channel_id": channel_id,
                "participants": participants,
                "protocol": channel.protocol.value,
                "security_level": channel.encryption_key.security_level.value if channel.encryption_key else "unknown",
                "established_time": channel.established_time.isoformat(),
                "status": "established"
            }

            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
            return {"error": str(e)}

    async def _generate_quantum_key(self, algorithm: EncryptionAlgorithm, key_length: int, security_level: SecurityLevel) -> QuantumKey:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞"""
        try:
            key_id = f"quantum_key_{secrets.token_hex(8)}"

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            if self.quantum_core and security_level in [SecurityLevel.QUANTUM_SAFE, SecurityLevel.MAXIMUM]:
                # –ò—Å—Ç–∏–Ω–Ω–∞—è –∫–≤–∞–Ω—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                key_material = await self.quantum_core.generate_quantum_random_bytes(key_length // 8)
                quantum_generated = True
                phi_entropy = PHI_RATIO
            else:
                # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å quantum enhancement
                key_material = secrets.token_bytes(key_length // 8)
                quantum_generated = False
                phi_entropy = 1.0

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞
            key = QuantumKey(
                key_id=key_id,
                key_material=key_material,
                algorithm=algorithm,
                key_length=key_length,
                generation_time=datetime.now(),
                expiry_time=datetime.now() + timedelta(hours=self.key_rotation_interval_hours),
                security_level=security_level,
                quantum_generated=quantum_generated,
                phi_entropy=phi_entropy
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.key_history.append(key)
            self.key_generations += 1

            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–∏
            self.key_rotation_schedule[key_id] = key.expiry_time

            return key

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞: {e}")
            raise

    async def _get_encryption_key(self, recipient: str, algorithm: EncryptionAlgorithm) -> QuantumKey:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
            for key in self.active_keys.values():
                if key.algorithm == algorithm and not self._is_key_expired(key):
                    return key

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
            security_level = SecurityLevel.QUANTUM_SAFE if self.quantum_safe else SecurityLevel.HIGH
            key_length = 256 if algorithm in [EncryptionAlgorithm.AES_256_GCM, EncryptionAlgorithm.QUANTUM_RESISTANT_KYBER] else 128

            return await self._generate_quantum_key(algorithm, key_length, security_level)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise

    def _is_key_expired(self, key: QuantumKey) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞"""
        return key.expiry_time and datetime.now() > key.expiry_time

    async def _perform_encryption(self, plaintext: bytes, key: QuantumKey) -> Tuple[bytes, bytes, bytes]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if key.algorithm == EncryptionAlgorithm.AES_256_GCM:
                # AES-GCM —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
                nonce = secrets.token_bytes(12)
                cipher = await self._aes_gcm_encrypt(plaintext, key.key_material, nonce)
                ciphertext, auth_tag = cipher
                return ciphertext, nonce, auth_tag

            elif key.algorithm == EncryptionAlgorithm.QUANTUM_RESISTANT_KYBER:
                # Kyber KEM —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
                return await self._kyber_encrypt(plaintext, key.key_material)

            else:
                # Fallback to AES
                nonce = secrets.token_bytes(12)
                cipher = await self._aes_gcm_encrypt(plaintext, key.key_material, nonce)
                ciphertext, auth_tag = cipher
                return ciphertext, nonce, auth_tag

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise

    async def _perform_decryption(self, ciphertext: bytes, nonce: bytes, auth_tag: bytes, key: QuantumKey) -> bytes:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"""
        try:
            if key.algorithm == EncryptionAlgorithm.AES_256_GCM:
                # AES-GCM —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
                return await self._aes_gcm_decrypt(ciphertext, key.key_material, nonce, auth_tag)

            elif key.algorithm == EncryptionAlgorithm.QUANTUM_RESISTANT_KYBER:
                # Kyber KEM —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
                return await self._kyber_decrypt(ciphertext, nonce, auth_tag, key.key_material)

            else:
                # Fallback to AES
                return await self._aes_gcm_decrypt(ciphertext, key.key_material, nonce, auth_tag)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
            raise

    async def _aes_gcm_encrypt(self, plaintext: bytes, key: bytes, nonce: bytes) -> Tuple[bytes, bytes]:
        """AES-GCM —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±—ã cryptography library
        # –ó–¥–µ—Å—å –∏–º–∏—Ç–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        ciphertext = plaintext  # –ó–∞–≥–ª—É—à–∫–∞
        auth_tag = secrets.token_bytes(16)
        return ciphertext, auth_tag

    async def _aes_gcm_decrypt(self, ciphertext: bytes, key: bytes, nonce: bytes, auth_tag: bytes) -> bytes:
        """AES-GCM —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±—ã cryptography library
        return ciphertext  # –ó–∞–≥–ª—É—à–∫–∞

    async def _kyber_encrypt(self, plaintext: bytes, key: bytes) -> Tuple[bytes, bytes, bytes]:
        """Kyber —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±—ã pqclean library
        ciphertext = plaintext  # –ó–∞–≥–ª—É—à–∫–∞
        nonce = secrets.token_bytes(32)
        auth_tag = secrets.token_bytes(32)
        return ciphertext, nonce, auth_tag

    async def _kyber_decrypt(self, ciphertext: bytes, nonce: bytes, auth_tag: bytes, key: bytes) -> bytes:
        """Kyber —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±—ã pqclean library
        return ciphertext  # –ó–∞–≥–ª—É—à–∫–∞

    async def _perform_qkd_key_exchange(self, participants: List[str]) -> QuantumKey:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ QKD –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è QKD –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            key_material = await self.quantum_core.generate_quantum_random_bytes(32) if self.quantum_core else secrets.token_bytes(32)

            key = QuantumKey(
                key_id=f"qkd_{secrets.token_hex(8)}",
                key_material=key_material,
                algorithm=EncryptionAlgorithm.QUANTUM_RESISTANT_KYBER,
                key_length=256,
                generation_time=datetime.now(),
                expiry_time=datetime.now() + timedelta(hours=1),  # QKD –∫–ª—é—á–∏ –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–µ
                security_level=SecurityLevel.MAXIMUM,
                quantum_generated=True,
                phi_entropy=PHI_RATIO * QUANTUM_FACTOR
            )

            self.qkd_sessions += 1
            return key

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ QKD –æ–±–º–µ–Ω–∞: {e}")
            raise

    async def _perform_post_quantum_kem(self, participants: List[str]) -> QuantumKey:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ post-quantum KEM"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è post-quantum KEM
            key_material = secrets.token_bytes(32)

            key = QuantumKey(
                key_id=f"pqkem_{secrets.token_hex(8)}",
                key_material=key_material,
                algorithm=EncryptionAlgorithm.QUANTUM_RESISTANT_KYBER,
                key_length=256,
                generation_time=datetime.now(),
                expiry_time=datetime.now() + timedelta(hours=self.key_rotation_interval_hours),
                security_level=SecurityLevel.QUANTUM_SAFE,
                quantum_generated=False,
                phi_entropy=PHI_RATIO
            )

            return key

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ post-quantum KEM: {e}")
            raise

    async def _perform_classical_key_exchange(self, participants: List[str], protocol: KeyExchangeProtocol) -> QuantumKey:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ key exchange
            key_material = secrets.token_bytes(32)

            algorithm = EncryptionAlgorithm.AES_256_GCM
            if protocol == KeyExchangeProtocol.ECDH_P384:
                algorithm = EncryptionAlgorithm.AES_256_GCM

            key = QuantumKey(
                key_id=f"classical_{secrets.token_hex(8)}",
                key_material=key_material,
                algorithm=algorithm,
                key_length=256,
                generation_time=datetime.now(),
                expiry_time=datetime.now() + timedelta(hours=self.key_rotation_interval_hours),
                security_level=SecurityLevel.HIGH,
                quantum_generated=False,
                phi_entropy=1.0
            )

            return key

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏: {e}")
            raise

    async def _apply_quantum_crypto_enhancement(self, base_result: Dict[str, Any], quantum_state: Any, entanglement: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ quantum enhancement –∫ cryptographic –æ–ø–µ—Ä–∞—Ü–∏—è–º"""
        try:
            if not self.quantum_core:
                return {}

            # Quantum-enhanced security analysis
            security_analysis = await self.quantum_core.analyze_crypto_security(
                base_result, quantum_state, entanglement
            )

            return {
                "security_boost": entanglement.get("entanglement_strength", 0) * QUANTUM_FACTOR,
                "phi_score": PHI_RATIO * entanglement.get("entanglement_strength", 1),
                "quantum_security_metrics": security_analysis.get("metrics", {})
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ quantum crypto enhancement: {e}")
            return {}

    async def _apply_quantum_key_exchange_enhancement(self, base_result: Dict[str, Any], quantum_state: Any, entanglement: Dict[str, Any]) -> Dict[str, Any]:
        """Quantum enhancement –¥–ª—è key exchange"""
        try:
            if not self.quantum_core:
                return {}

            # Enhanced key exchange security
            enhanced_security = await self.quantum_core.enhance_key_exchange_security(
                base_result, quantum_state, entanglement
            )

            return {
                "key_exchange_security_boost": entanglement.get("entanglement_strength", 0) * QUANTUM_FACTOR,
                "phi_key_score": PHI_RATIO ** 2,
                "enhanced_protocols": enhanced_security.get("protocols", [])
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ quantum key exchange enhancement: {e}")
            return {}

    async def rotate_keys(self) -> Dict[str, Any]:
        """–†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π"""
        try:
            self.logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–π...")

            rotated_keys = []
            expired_keys = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ
            current_time = datetime.now()
            for key_id, key in list(self.active_keys.items()):
                if self._is_key_expired(key):
                    expired_keys.append(key_id)

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
                    new_key = await self._generate_quantum_key(
                        key.algorithm, key.key_length, key.security_level
                    )

                    # –ó–∞–º–µ–Ω–∞ –∫–ª—é—á–∞
                    self.active_keys[key_id] = new_key
                    rotated_keys.append(key_id)

            # –û—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–æ—Ç–∞—Ü–∏–∏
            for key_id in expired_keys:
                if key_id in self.key_rotation_schedule:
                    del self.key_rotation_schedule[key_id]

            result = {
                "rotated_keys": rotated_keys,
                "expired_keys": expired_keys,
                "total_active_keys": len(self.active_keys),
                "rotation_time": datetime.now().isoformat()
            }

            self.logger.info(f"–†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {len(rotated_keys)} –∫–ª—é—á–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
            return {"error": str(e)}

    async def get_crypto_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            active_channels = len([c for c in self.secure_channels.values() if c.security_status == "active"])

            return {
                "name": self.name,
                "status": self.status,
                "quantum_safe": self.quantum_safe,
                "security_level": self.security_level.value,
                "active_keys": len(self.active_keys),
                "total_keys_generated": len(self.key_history),
                "active_channels": active_channels,
                "total_messages": len(self.message_log),
                "encryption_operations": self.encryption_operations,
                "qkd_sessions": self.qkd_sessions,
                "security_breaches": self.security_breaches,
                "key_rotation_due": len([k for k in self.key_rotation_schedule.values() if k <= datetime.now()])
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ crypto: {e}")
            return {"status": "error", "error": str(e)}

    async def optimize_crypto_performance(self) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.logger.info("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã...")

            optimizations = {}

            # –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π
            key_rotation = await self.rotate_keys()
            optimizations["key_rotation"] = key_rotation

            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
            channel_cleanup = await self._cleanup_secure_channels()
            optimizations["channel_cleanup"] = channel_cleanup

            # Quantum optimization
            if self.quantum_core:
                quantum_opts = await self.quantum_core.optimize_crypto_performance()
                optimizations["quantum_optimization"] = quantum_opts

            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            history_cleanup = await self._cleanup_crypto_history()
            optimizations["history_cleanup"] = history_cleanup

            self.logger.info(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {len(optimizations)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return optimizations

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}

    async def _cleanup_secure_channels(self) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            current_time = datetime.now()
            inactive_channels = []

            for channel_id, channel in list(self.secure_channels.items()):
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
                if (current_time - channel.last_activity).total_seconds() > 86400:
                    inactive_channels.append(channel_id)
                    del self.secure_channels[channel_id]

            return {
                "inactive_channels_removed": len(inactive_channels),
                "active_channels_remaining": len(self.secure_channels)
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {"error": str(e)}

    async def _cleanup_crypto_history(self) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
            if len(self.message_log) > 1000:
                removed_count = len(self.message_log) - 1000
                self.message_log = self.message_log[-1000:]
            else:
                removed_count = 0

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª—é—á–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            if len(self.key_history) > 100:
                self.key_history = self.key_history[-100:]

            return {
                "messages_removed": removed_count,
                "keys_history_limited": len(self.key_history)
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return {"error": str(e)}

    async def shutdown(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Quantum Cryptography"""
        try:
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Quantum Cryptography...")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π
            await self.rotate_keys()

            # –û—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            self.active_keys.clear()
            self.secure_channels.clear()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._save_crypto_stats()

            self.set_status("shutdown")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Quantum Cryptography: {e}")
            return False

    async def _save_crypto_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            stats = await self.get_crypto_status()
            stats["shutdown_time"] = datetime.now().isoformat()

            with open("quantum_cryptography_stats.json", 'w') as f:
                json.dump(stats, f, indent=2, default=str)

            self.logger.info("Quantum Cryptography stats saved")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ò–º–ø–æ—Ä—Ç timedelta –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
from datetime import timedelta