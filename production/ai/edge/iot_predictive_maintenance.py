#!/usr/bin/env python3
"""
üõ†Ô∏è IoT PREDICTIVE MAINTENANCE - Quantum-enhanced –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
–ê–Ω–∞–ª–∏–∑ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å quantum enhancement –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤
"""

import asyncio
import time
import json
import logging
from typing import Dict, Any, List, Optional, Tuple
from enum import Enum
from dataclasses import dataclass
from datetime import datetime
import numpy as np

# –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
from ...base_interface import BaseComponent

# –ò–º–ø–æ—Ä—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
try:
    from ...quantum.quantum_interface import QuantumCore
    QUANTUM_AVAILABLE = True
except ImportError:
    QUANTUM_AVAILABLE = False
    QuantumCore = None

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã x0tta6bl4
PHI_RATIO = 1.618033988749895
QUANTUM_FACTOR = 2.718281828459045

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MaintenanceStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    HEALTHY = "healthy"
    MONITORING = "monitoring"
    WARNING = "warning"
    CRITICAL = "critical"
    MAINTENANCE_REQUIRED = "maintenance_required"

class FailureType(Enum):
    """–¢–∏–ø—ã –æ—Ç–∫–∞–∑–æ–≤"""
    MECHANICAL = "mechanical"
    ELECTRICAL = "electrical"
    THERMAL = "thermal"
    SOFTWARE = "software"
    SENSOR = "sensor"
    UNKNOWN = "unknown"

@dataclass
class SensorData:
    """–î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–∞"""
    device_id: str
    timestamp: datetime
    temperature: float
    vibration: float
    current: float
    voltage: float
    pressure: Optional[float] = None
    humidity: Optional[float] = None
    additional_sensors: Dict[str, float] = None

@dataclass
class MaintenancePrediction:
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    device_id: str
    failure_probability: float
    predicted_failure_time: Optional[datetime]
    failure_type: FailureType
    confidence_score: float
    recommended_actions: List[str]
    quantum_enhanced: bool
    timestamp: datetime

class IoTPredictiveMaintenance(BaseComponent):
    """Quantum-enhanced –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""

    def __init__(self):
        super().__init__("iot_predictive_maintenance")

        # –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.quantum_core = None

        # –ú–æ–¥–µ–ª–∏ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        self.failure_prediction_model = None
        self.anomaly_detection_model = None

        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.device_history: Dict[str, List[SensorData]] = {}
        self.device_predictions: Dict[str, List[MaintenancePrediction]] = {}

        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.failure_thresholds = {
            "temperature": {"warning": 70.0, "critical": 85.0},
            "vibration": {"warning": 0.8, "critical": 1.2},
            "current": {"warning": 12.0, "critical": 15.0},
            "voltage": {"warning": 220.0, "critical": 250.0}
        }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_predictions = 0
        self.accurate_predictions = 0
        self.false_positives = 0
        self.missed_failures = 0

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.quantum_enhanced = True
        self.prediction_window_hours = 24  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞
        self.confidence_threshold = 0.7

        logger.info("IoT Predictive Maintenance initialized")

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IoT Predictive Maintenance"""
        try:
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IoT Predictive Maintenance...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ core
            if QUANTUM_AVAILABLE:
                self.quantum_core = QuantumCore()
                quantum_init = await self.quantum_core.initialize()
                if quantum_init:
                    self.logger.info("Quantum Core –¥–ª—è IoT —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    self.logger.warning("Quantum Core –¥–ª—è IoT –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
            await self._initialize_prediction_models()

            self.set_status("operational")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IoT Predictive Maintenance: {e}")
            self.set_status("failed")
            return False

    async def _initialize_prediction_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç ML –º–æ–¥–µ–ª–∏
            self.failure_prediction_model = {
                "temperature_weight": 0.4,
                "vibration_weight": 0.3,
                "current_weight": 0.2,
                "voltage_weight": 0.1,
                "phi_enhancement": PHI_RATIO
            }

            self.anomaly_detection_model = {
                "z_score_threshold": 2.5,
                "moving_average_window": 10,
                "quantum_sensitivity": 1.5
            }

            self.logger.info("–ú–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")

    async def process_inference(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inference –¥–ª—è IoT –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            sensor_data = self._parse_sensor_data(input_data)

            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_status = await self._analyze_device_status(sensor_data)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤
            prediction = await self._predict_device_failure(sensor_data)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = await self._generate_maintenance_recommendations(sensor_data, prediction)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await self._store_device_data(sensor_data, prediction)

            return {
                "device_id": sensor_data.device_id,
                "current_status": current_status.value,
                "failure_probability": prediction.failure_probability,
                "predicted_failure_time": prediction.predicted_failure_time.isoformat() if prediction.predicted_failure_time else None,
                "failure_type": prediction.failure_type.value,
                "confidence_score": prediction.confidence_score,
                "recommended_actions": recommendations,
                "quantum_enhanced": prediction.quantum_enhanced,
                "timestamp": prediction.timestamp.isoformat()
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ IoT inference: {e}")
            return {"error": str(e), "device_id": input_data.get("device_id", "unknown")}

    async def process_quantum_inference(self, input_data: Dict[str, Any], quantum_state: Any, entanglement: Dict[str, Any]) -> Dict[str, Any]:
        """Quantum-enhanced –æ–±—Ä–∞–±–æ—Ç–∫–∞ IoT –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            base_result = await self.process_inference(input_data)

            if not self.quantum_core or "error" in base_result:
                return base_result

            # Quantum enhancement
            quantum_enhanced_prediction = await self._apply_quantum_failure_prediction(
                input_data, quantum_state, entanglement
            )

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            enhanced_result = base_result.copy()
            enhanced_result.update({
                "quantum_failure_probability": quantum_enhanced_prediction.get("failure_probability", 0),
                "quantum_confidence_boost": quantum_enhanced_prediction.get("confidence_boost", 0),
                "entanglement_strength": entanglement.get("entanglement_strength", 0),
                "quantum_enhanced": True
            })

            # Œ¶-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            phi_optimized = await self._apply_phi_optimization_to_prediction(enhanced_result)

            return phi_optimized

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ quantum IoT inference: {e}")
            return await self.process_inference(input_data)

    def _parse_sensor_data(self, input_data: Dict[str, Any]) -> SensorData:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–∞"""
        try:
            return SensorData(
                device_id=input_data.get("device_id", "unknown"),
                timestamp=datetime.now(),
                temperature=input_data.get("temperature", 25.0),
                vibration=input_data.get("vibration", 0.0),
                current=input_data.get("current", 0.0),
                voltage=input_data.get("voltage", 220.0),
                pressure=input_data.get("pressure"),
                humidity=input_data.get("humidity"),
                additional_sensors=input_data.get("additional_sensors", {})
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –í–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return SensorData(
                device_id=input_data.get("device_id", "unknown"),
                timestamp=datetime.now(),
                temperature=25.0,
                vibration=0.0,
                current=0.0,
                voltage=220.0
            )

    async def _analyze_device_status(self, sensor_data: SensorData) -> MaintenanceStatus:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
            critical_indicators = 0
            warning_indicators = 0

            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            if sensor_data.temperature > self.failure_thresholds["temperature"]["critical"]:
                critical_indicators += 1
            elif sensor_data.temperature > self.failure_thresholds["temperature"]["warning"]:
                warning_indicators += 1

            # –í–∏–±—Ä–∞—Ü–∏—è
            if sensor_data.vibration > self.failure_thresholds["vibration"]["critical"]:
                critical_indicators += 1
            elif sensor_data.vibration > self.failure_thresholds["vibration"]["warning"]:
                warning_indicators += 1

            # –¢–æ–∫
            if sensor_data.current > self.failure_thresholds["current"]["critical"]:
                critical_indicators += 1
            elif sensor_data.current > self.failure_thresholds["current"]["warning"]:
                warning_indicators += 1

            # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ
            if sensor_data.voltage > self.failure_thresholds["voltage"]["critical"]:
                critical_indicators += 1
            elif sensor_data.voltage > self.failure_thresholds["voltage"]["warning"]:
                warning_indicators += 1

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            if critical_indicators > 0:
                return MaintenanceStatus.CRITICAL
            elif warning_indicators > 1:
                return MaintenanceStatus.WARNING
            elif warning_indicators > 0:
                return MaintenanceStatus.MONITORING
            else:
                return MaintenanceStatus.HEALTHY

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return MaintenanceStatus.UNKNOWN

    async def _predict_device_failure(self, sensor_data: SensorData) -> MaintenancePrediction:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            device_id = sensor_data.device_id

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            history = self.device_history.get(device_id, [])

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            failure_probability = await self._calculate_failure_probability(sensor_data, history)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–∫–∞–∑–∞
            failure_type = await self._determine_failure_type(sensor_data)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–∞–∑–∞
            predicted_time = await self._predict_failure_time(sensor_data, failure_probability)

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ confidence score
            confidence_score = await self._calculate_prediction_confidence(sensor_data, history)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = await self._generate_maintenance_recommendations(sensor_data, None)

            prediction = MaintenancePrediction(
                device_id=device_id,
                failure_probability=failure_probability,
                predicted_failure_time=predicted_time,
                failure_type=failure_type,
                confidence_score=confidence_score,
                recommended_actions=recommendations,
                quantum_enhanced=self.quantum_enhanced,
                timestamp=datetime.now()
            )

            return prediction

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–∞–∑–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—Ç fallback –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            return MaintenancePrediction(
                device_id=sensor_data.device_id,
                failure_probability=0.0,
                predicted_failure_time=None,
                failure_type=FailureType.UNKNOWN,
                confidence_score=0.0,
                recommended_actions=["–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"],
                quantum_enhanced=False,
                timestamp=datetime.now()
            )

    async def _calculate_failure_probability(self, sensor_data: SensorData, history: List[SensorData]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞–∑–∞"""
        try:
            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –Ω–æ—Ä–º—ã
            weights = self.failure_prediction_model

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π (0-1 —à–∫–∞–ª–∞)
            temp_score = min(sensor_data.temperature / 100.0, 1.0)
            vib_score = min(sensor_data.vibration / 2.0, 1.0)
            current_score = min(sensor_data.current / 20.0, 1.0)
            voltage_score = min(abs(sensor_data.voltage - 220.0) / 50.0, 1.0)

            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            probability = (
                temp_score * weights["temperature_weight"] +
                vib_score * weights["vibration_weight"] +
                current_score * weights["current_weight"] +
                voltage_score * weights["voltage_weight"]
            )

            # Œ¶-—É—Å–∏–ª–µ–Ω–∏–µ
            probability *= weights["phi_enhancement"] / 2.0

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            return min(max(probability, 0.0), 1.0)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞–∑–∞: {e}")
            return 0.0

    async def _determine_failure_type(self, sensor_data: SensorData) -> FailureType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–∫–∞–∑–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç–∫–∞–∑–∞
            if sensor_data.temperature > 90.0:
                return FailureType.THERMAL
            elif sensor_data.vibration > 1.5:
                return FailureType.MECHANICAL
            elif sensor_data.current > 18.0 or abs(sensor_data.voltage - 220.0) > 30.0:
                return FailureType.ELECTRICAL
            elif sensor_data.pressure and sensor_data.pressure < 0.5:
                return FailureType.MECHANICAL
            else:
                return FailureType.UNKNOWN

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç–∫–∞–∑–∞: {e}")
            return FailureType.UNKNOWN

    async def _predict_failure_time(self, sensor_data: SensorData, failure_probability: float) -> Optional[datetime]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–∞–∑–∞"""
        try:
            if failure_probability < 0.3:
                return None  # –ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –Ω–∏–∑–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏

            # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å: —á–µ–º –≤—ã—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —Ç–µ–º –±–ª–∏–∂–µ –æ—Ç–∫–∞–∑
            hours_to_failure = max(1, int((1 - failure_probability) * self.prediction_window_hours))

            return datetime.now() + timedelta(hours=hours_to_failure)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–∞–∑–∞: {e}")
            return None

    async def _calculate_prediction_confidence(self, sensor_data: SensorData, history: List[SensorData]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            history_confidence = min(len(history) / 100.0, 1.0)

            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            if len(history) > 5:
                temp_stability = 1.0 / (1.0 + np.std([h.temperature for h in history[-10:]]))
                vib_stability = 1.0 / (1.0 + np.std([h.vibration for h in history[-10:]]))
                stability_confidence = (temp_stability + vib_stability) / 2.0
            else:
                stability_confidence = 0.5

            confidence = (history_confidence + stability_confidence) / 2.0
            return min(confidence, 1.0)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return 0.5

    async def _generate_maintenance_recommendations(self, sensor_data: SensorData, prediction: Optional[MaintenancePrediction]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é"""
        recommendations = []

        try:
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            if sensor_data.temperature > 80.0:
                recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è")
            if sensor_data.vibration > 1.0:
                recommendations.append("–û—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
            if sensor_data.current > 15.0:
                recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            if abs(sensor_data.voltage - 220.0) > 20.0:
                recommendations.append("–ö–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–∏—Ç–∞–Ω–∏—è")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if prediction and prediction.failure_probability > 0.7:
                recommendations.append("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
                if prediction.predicted_failure_time:
                    recommendations.append(f"–û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–∫–∞–∑: {prediction.predicted_failure_time.strftime('%Y-%m-%d %H:%M')}")

            if not recommendations:
                recommendations.append("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            recommendations = ["–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"]

        return recommendations

    async def _apply_quantum_failure_prediction(self, input_data: Dict[str, Any], quantum_state: Any, entanglement: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ quantum enhancement –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é –æ—Ç–∫–∞–∑–æ–≤"""
        try:
            if not self.quantum_core:
                return {}

            # Quantum-enhanced –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            quantum_analysis = await self.quantum_core.analyze_failure_patterns(
                input_data, quantum_state, entanglement
            )

            # –£–ª—É—á—à–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞–∑–∞
            base_probability = input_data.get("failure_probability", 0)
            quantum_boost = entanglement.get("entanglement_strength", 0) * QUANTUM_FACTOR

            enhanced_probability = min(base_probability * quantum_boost, 1.0)

            return {
                "failure_probability": enhanced_probability,
                "confidence_boost": quantum_boost,
                "quantum_patterns_detected": quantum_analysis.get("patterns", [])
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ quantum failure prediction: {e}")
            return {}

    async def _apply_phi_optimization_to_prediction(self, prediction_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ œÜ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é"""
        try:
            optimized = prediction_data.copy()

            # Œ¶-–≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞–∑–∞
            if "failure_probability" in optimized:
                phi_factor = PHI_RATIO ** 0.5
                optimized["failure_probability"] = min(optimized["failure_probability"] * phi_factor, 1.0)

            # Œ¶-—É—Å–∏–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if "confidence_score" in optimized:
                optimized["confidence_score"] = min(optimized["confidence_score"] * PHI_RATIO, 1.0)

            return optimized

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ œÜ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return prediction_data

    async def _store_device_data(self, sensor_data: SensorData, prediction: MaintenancePrediction):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            device_id = sensor_data.device_id

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if device_id not in self.device_history:
                self.device_history[device_id] = []

            self.device_history[device_id].append(sensor_data)

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
            if len(self.device_history[device_id]) > 1000:
                self.device_history[device_id] = self.device_history[device_id][-1000:]

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            if device_id not in self.device_predictions:
                self.device_predictions[device_id] = []

            self.device_predictions[device_id].append(prediction)

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            if len(self.device_predictions[device_id]) > 100:
                self.device_predictions[device_id] = self.device_predictions[device_id][-100:]

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")

    async def get_device_health_status(self, device_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            if device_id not in self.device_history:
                return {"status": "unknown", "device_id": device_id}

            history = self.device_history[device_id]
            predictions = self.device_predictions.get(device_id, [])

            if not history:
                return {"status": "no_data", "device_id": device_id}

            latest_data = history[-1]
            latest_prediction = predictions[-1] if predictions else None

            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
            temp_trend = self._calculate_trend([h.temperature for h in history[-10:]])
            vib_trend = self._calculate_trend([h.vibration for h in history[-10:]])

            return {
                "device_id": device_id,
                "current_status": (await self._analyze_device_status(latest_data)).value,
                "latest_reading": {
                    "temperature": latest_data.temperature,
                    "vibration": latest_data.vibration,
                    "current": latest_data.current,
                    "voltage": latest_data.voltage,
                    "timestamp": latest_data.timestamp.isoformat()
                },
                "trends": {
                    "temperature_trend": temp_trend,
                    "vibration_trend": vib_trend
                },
                "latest_prediction": {
                    "failure_probability": latest_prediction.failure_probability if latest_prediction else 0,
                    "confidence_score": latest_prediction.confidence_score if latest_prediction else 0,
                    "failure_type": latest_prediction.failure_type.value if latest_prediction else "unknown"
                } if latest_prediction else None,
                "data_points": len(history),
                "predictions_count": len(predictions)
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return {"status": "error", "device_id": device_id, "error": str(e)}

    def _calculate_trend(self, values: List[float]) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π"""
        try:
            if len(values) < 2:
                return "stable"

            # –õ–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
            x = np.arange(len(values))
            slope = np.polyfit(x, values, 1)[0]

            if slope > 0.1:
                return "increasing"
            elif slope < -0.1:
                return "decreasing"
            else:
                return "stable"

        except Exception:
            return "unknown"

    async def optimize_performance(self) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ IoT Predictive Maintenance"""
        try:
            self.logger.info("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è IoT Predictive Maintenance...")

            # –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ—Ä–æ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            await self._recalculate_thresholds()

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await self._cleanup_old_data()

            # Quantum optimization
            quantum_optimization = {}
            if self.quantum_core:
                quantum_optimization = await self.quantum_core.optimize_iot_performance()

            return {
                "thresholds_recalculated": True,
                "old_data_cleaned": True,
                "quantum_optimization": quantum_optimization,
                "active_devices": len(self.device_history),
                "total_predictions": self.total_predictions
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {"error": str(e)}

    async def _recalculate_thresholds(self):
        """–ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ—Ä–æ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
            all_temps = []
            all_vibs = []
            all_currents = []
            all_voltages = []

            for device_data in self.device_history.values():
                all_temps.extend([d.temperature for d in device_data])
                all_vibs.extend([d.vibration for d in device_data])
                all_currents.extend([d.current for d in device_data])
                all_voltages.extend([d.voltage for d in device_data])

            if all_temps:
                self.failure_thresholds["temperature"]["warning"] = np.percentile(all_temps, 85)
                self.failure_thresholds["temperature"]["critical"] = np.percentile(all_temps, 95)

            if all_vibs:
                self.failure_thresholds["vibration"]["warning"] = np.percentile(all_vibs, 85)
                self.failure_thresholds["vibration"]["critical"] = np.percentile(all_vibs, 95)

            if all_currents:
                self.failure_thresholds["current"]["warning"] = np.percentile(all_currents, 85)
                self.failure_thresholds["current"]["critical"] = np.percentile(all_currents, 95)

            if all_voltages:
                self.failure_thresholds["voltage"]["warning"] = np.percentile(all_voltages, 85)
                self.failure_thresholds["voltage"]["critical"] = np.percentile(all_voltages, 95)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø–æ—Ä–æ–≥–æ–≤: {e}")

    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cutoff_date = datetime.now() - timedelta(days=30)  # –•—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π

            for device_id in list(self.device_history.keys()):
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self.device_history[device_id] = [
                    data for data in self.device_history[device_id]
                    if data.timestamp > cutoff_date
                ]

                # –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
                if not self.device_history[device_id]:
                    del self.device_history[device_id]
                    if device_id in self.device_predictions:
                        del self.device_predictions[device_id]

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def shutdown(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ IoT Predictive Maintenance"""
        try:
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ IoT Predictive Maintenance...")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._save_final_stats()

            self.set_status("shutdown")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ IoT Predictive Maintenance: {e}")
            return False

    async def _save_final_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = {
                "total_devices": len(self.device_history),
                "total_predictions": self.total_predictions,
                "accurate_predictions": self.accurate_predictions,
                "false_positives": self.false_positives,
                "missed_failures": self.missed_failures,
                "accuracy_rate": self.accurate_predictions / max(self.total_predictions, 1),
                "quantum_enhanced": self.quantum_enhanced
            }

            with open("iot_predictive_maintenance_stats.json", 'w') as f:
                json.dump(stats, f, indent=2, default=str)

            self.logger.info("IoT Predictive Maintenance stats saved")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ò–º–ø–æ—Ä—Ç timedelta –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
from datetime import timedelta