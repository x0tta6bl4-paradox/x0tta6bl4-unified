#!/usr/bin/env python3
"""
ü§ñ –†–∞–±–æ—á–∏–µ AI –∞–≥–µ–Ω—Ç—ã –¥–ª—è x0tta6bl4
–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import sys
import time
import json
import asyncio
from datetime import datetime
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
import threading
import queue

@dataclass
class AgentMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
    sender: str
    receiver: str
    content: Any
    timestamp: datetime
    message_type: str = "info"

class BaseAgent:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, name: str, agent_type: str = "base"):
        self.name = name
        self.agent_type = agent_type
        self.status = "initialized"
        self.message_queue = queue.Queue()
        self.running = False
        self.phi_ratio = 1.618033988749895
        self.base_frequency = 108.0
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        self.running = True
        self.status = "running"
        print(f"ü§ñ –ê–≥–µ–Ω—Ç {self.name} –∑–∞–ø—É—â–µ–Ω")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        self.running = False
        self.status = "stopped"
        print(f"ü§ñ –ê–≥–µ–Ω—Ç {self.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def send_message(self, receiver: str, content: Any, message_type: str = "info"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –∞–≥–µ–Ω—Ç—É"""
        message = AgentMessage(
            sender=self.name,
            receiver=receiver,
            content=content,
            timestamp=datetime.now(),
            message_type=message_type
        )
        return message
        
    def process_message(self, message: AgentMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print(f"üì® {self.name} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.sender}: {message.content}")
        
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        return {
            "name": self.name,
            "type": self.agent_type,
            "status": self.status,
            "running": self.running,
            "phi_ratio": self.phi_ratio,
            "base_frequency": self.base_frequency
        }

class QuantumAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        super().__init__("QuantumAgent", "quantum")
        self.quantum_circuits = []
        self.quantum_results = []
        
    def create_bell_state(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Bell —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            from qiskit import QuantumCircuit
            qc = QuantumCircuit(2, 2)
            qc.h(0)
            qc.cx(0, 1)
            qc.measure_all()
            
            self.quantum_circuits.append(qc)
            print(f"‚úÖ {self.name} —Å–æ–∑–¥–∞–ª Bell —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            return True
        except ImportError:
            print(f"‚ùå {self.name}: Qiskit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        except Exception as e:
            print(f"‚ùå {self.name}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bell —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return False
    
    def execute_quantum_circuit(self, circuit_index: int = 0):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã"""
        try:
            from qiskit_aer import AerSimulator
            
            if circuit_index >= len(self.quantum_circuits):
                print(f"‚ùå {self.name}: –°—Ö–µ–º–∞ {circuit_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            qc = self.quantum_circuits[circuit_index]
            simulator = AerSimulator()
            job = simulator.run(qc, shots=1000)
            result = job.result()
            counts = result.get_counts()
            
            self.quantum_results.append(counts)
            print(f"‚úÖ {self.name} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–≤–∞–Ω—Ç–æ–≤—É—é —Å—Ö–µ–º—É")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {counts}")
            return True
            
        except Exception as e:
            print(f"‚ùå {self.name}: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def process_message(self, message: AgentMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        super().process_message(message)
        
        if message.content == "create_bell_state":
            self.create_bell_state()
        elif message.content == "execute_quantum":
            self.execute_quantum_circuit()
        elif message.content == "get_quantum_status":
            return {
                "circuits": len(self.quantum_circuits),
                "results": len(self.quantum_results),
                "status": self.status
            }

class MLAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__("MLAgent", "ml")
        self.models = []
        self.training_data = []
        
    def create_neural_network(self, input_size: int = 10, hidden_size: int = 5, output_size: int = 1):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        try:
            import torch
            import torch.nn as nn
            
            model = nn.Sequential(
                nn.Linear(input_size, hidden_size),
                nn.ReLU(),
                nn.Linear(hidden_size, output_size)
            )
            
            self.models.append(model)
            print(f"‚úÖ {self.name} —Å–æ–∑–¥–∞–ª –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å")
            print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {sum(p.numel() for p in model.parameters())}")
            return True
            
        except ImportError:
            print(f"‚ùå {self.name}: PyTorch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        except Exception as e:
            print(f"‚ùå {self.name}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏: {e}")
            return False
    
    def train_model(self, model_index: int = 0, epochs: int = 10):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        try:
            import torch
            import torch.optim as optim
            
            if model_index >= len(self.models):
                print(f"‚ùå {self.name}: –ú–æ–¥–µ–ª—å {model_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            model = self.models[model_index]
            optimizer = optim.Adam(model.parameters())
            criterion = torch.nn.MSELoss()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            x = torch.randn(100, 10)
            y = torch.randn(100, 1)
            
            for epoch in range(epochs):
                optimizer.zero_grad()
                output = model(x)
                loss = criterion(output, y)
                loss.backward()
                optimizer.step()
                
                if epoch % 5 == 0:
                    print(f"üìà {self.name} —ç–ø–æ—Ö–∞ {epoch}, loss: {loss.item():.4f}")
            
            print(f"‚úÖ {self.name} –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå {self.name}: –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def process_message(self, message: AgentMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ML –∞–≥–µ–Ω—Ç–∞"""
        super().process_message(message)
        
        if message.content == "create_network":
            self.create_neural_network()
        elif message.content == "train_model":
            self.train_model()
        elif message.content == "get_ml_status":
            return {
                "models": len(self.models),
                "training_data": len(self.training_data),
                "status": self.status
            }

class CulturalAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        super().__init__("CulturalAgent", "cultural")
        self.archetypes = ["hero", "mentor", "shadow", "trickster"]
        self.analysis_results = []
        
    def analyze_text(self, text: str):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
            archetype_scores = {}
            text_lower = text.lower()
            
            for archetype in self.archetypes:
                score = text_lower.count(archetype) / len(text.split())
                archetype_scores[archetype] = score
            
            # œÜ-–≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞
            total_score = sum(archetype_scores.values())
            phi_harmony = total_score * self.phi_ratio
            
            result = {
                "text": text[:50] + "..." if len(text) > 50 else text,
                "archetype_scores": archetype_scores,
                "phi_harmony": phi_harmony,
                "timestamp": datetime.now().isoformat()
            }
            
            self.analysis_results.append(result)
            print(f"‚úÖ {self.name} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ç–µ–∫—Å—Ç")
            print(f"üìä œÜ-–≥–∞—Ä–º–æ–Ω–∏—è: {phi_harmony:.3f}")
            return True
            
        except Exception as e:
            print(f"‚ùå {self.name}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False
    
    def process_message(self, message: AgentMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        super().process_message(message)
        
        if isinstance(message.content, str) and message.content.startswith("analyze:"):
            text = message.content[8:]  # –£–±–∏—Ä–∞–µ–º "analyze:"
            self.analyze_text(text)
        elif message.content == "get_cultural_status":
            return {
                "archetypes": len(self.archetypes),
                "analyses": len(self.analysis_results),
                "status": self.status
            }

class MonitoringAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        super().__init__("MonitoringAgent", "monitoring")
        self.metrics = {}
        self.alerts = []
        
    def collect_metrics(self):
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            import psutil
            
            metrics = {
                "cpu_percent": psutil.cpu_percent(),
                "memory_percent": psutil.virtual_memory().percent,
                "disk_percent": psutil.disk_usage('/').percent,
                "timestamp": datetime.now().isoformat()
            }
            
            self.metrics = metrics
            print(f"‚úÖ {self.name} —Å–æ–±—Ä–∞–ª –º–µ—Ç—Ä–∏–∫–∏")
            print(f"üìä CPU: {metrics['cpu_percent']}%")
            print(f"üìä Memory: {metrics['memory_percent']}%")
            return True
            
        except ImportError:
            print(f"‚ùå {self.name}: psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        except Exception as e:
            print(f"‚ùå {self.name}: –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            return False
    
    def check_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = []
        
        if self.metrics.get('cpu_percent', 0) > 80:
            alerts.append("High CPU usage")
        if self.metrics.get('memory_percent', 0) > 80:
            alerts.append("High memory usage")
        if self.metrics.get('disk_percent', 0) > 90:
            alerts.append("High disk usage")
        
        self.alerts = alerts
        if alerts:
            print(f"‚ö†Ô∏è {self.name} –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–ª–µ—Ä—Ç—ã: {alerts}")
        else:
            print(f"‚úÖ {self.name} —Å–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º–µ")
        
        return len(alerts) == 0
    
    def process_message(self, message: AgentMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        super().process_message(message)
        
        if message.content == "collect_metrics":
            self.collect_metrics()
        elif message.content == "check_alerts":
            self.check_alerts()
        elif message.content == "get_monitoring_status":
            return {
                "metrics": self.metrics,
                "alerts": len(self.alerts),
                "status": self.status
            }

class AgentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.agents = {}
        self.message_history = []
        
    def add_agent(self, agent: BaseAgent):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        self.agents[agent.name] = agent
        print(f"ü§ñ –î–æ–±–∞–≤–ª–µ–Ω –∞–≥–µ–Ω—Ç: {agent.name}")
        
    def start_all_agents(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        for agent in self.agents.values():
            agent.start()
        print(f"üöÄ –ó–∞–ø—É—â–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(self.agents)}")
        
    def stop_all_agents(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        for agent in self.agents.values():
            agent.stop()
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(self.agents)}")
        
    def send_message(self, sender: str, receiver: str, content: Any, message_type: str = "info"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        if receiver in self.agents:
            message = self.agents[sender].send_message(receiver, content, message_type)
            self.agents[receiver].process_message(message)
            self.message_history.append(message)
            return True
        return False
    
    def get_system_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        status = {
            "total_agents": len(self.agents),
            "running_agents": sum(1 for agent in self.agents.values() if agent.running),
            "messages_sent": len(self.message_history),
            "agents": {}
        }
        
        for name, agent in self.agents.items():
            status["agents"][name] = agent.get_status()
        
        return status

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö AI –∞–≥–µ–Ω—Ç–æ–≤"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        ü§ñ x0tta6bl4 AI AGENTS DEMO ü§ñ                      ‚ïë
‚ïë                    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö AI –∞–≥–µ–Ω—Ç–æ–≤                           ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  Œ¶ = 1.618 | base frequency = 108 Hz | Status: OPERATIONAL                  ‚ïë
‚ïë  ‚öõÔ∏è Quantum | ü§ñ ML | üé≠ Cultural | üìä Monitoring                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
    manager = AgentManager()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    quantum_agent = QuantumAgent()
    ml_agent = MLAgent()
    cultural_agent = CulturalAgent()
    monitoring_agent = MonitoringAgent()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    manager.add_agent(quantum_agent)
    manager.add_agent(ml_agent)
    manager.add_agent(cultural_agent)
    manager.add_agent(monitoring_agent)
    
    # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤
    manager.start_all_agents()
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–û–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    print("\n‚öõÔ∏è –¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:")
    manager.send_message("QuantumAgent", "QuantumAgent", "create_bell_state")
    manager.send_message("QuantumAgent", "QuantumAgent", "execute_quantum")
    
    # –¢–µ—Å—Ç ML –∞–≥–µ–Ω—Ç–∞
    print("\nü§ñ –¢–µ—Å—Ç ML –∞–≥–µ–Ω—Ç–∞:")
    manager.send_message("MLAgent", "MLAgent", "create_network")
    manager.send_message("MLAgent", "MLAgent", "train_model")
    
    # –¢–µ—Å—Ç –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    print("\nüé≠ –¢–µ—Å—Ç –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:")
    manager.send_message("CulturalAgent", "CulturalAgent", "analyze:This is a heroic journey of a mentor guiding the hero through challenges")
    
    # –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("\nüìä –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    manager.send_message("MonitoringAgent", "MonitoringAgent", "collect_metrics")
    manager.send_message("MonitoringAgent", "MonitoringAgent", "check_alerts")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    print("\nüìã –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ê–ì–ï–ù–¢–û–í")
    print("=" * 50)
    status = manager.get_system_status()
    print(f"‚úÖ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {status['total_agents']}")
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {status['running_agents']}")
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {status['messages_sent']}")
    
    print("\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤:")
    for name, agent_status in status['agents'].items():
        print(f"  ü§ñ {name}: {agent_status['status']} ({agent_status['type']})")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
    manager.stop_all_agents()
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("‚úÖ AI –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
    print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")

if __name__ == "__main__":
    main()
